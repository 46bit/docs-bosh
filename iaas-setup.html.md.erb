---
title: Setting Up your IaaS for BOSH
---

Before you deploy BOSH or MicroBOSH, complete the following steps to set up your IaaS:

1. Allocate hardware resources
1. Restrict inbound network traffic
1. (AWS Only) Complete your IaaS setup
1. Validate your IaaS instance

**Note**: BOSH supports the VPC flavor of AWS, but not the EC2 flavor.

## <a id="hardware"></a> Step 1: Allocate Hardware Resources ##

Your intended use of BOSH determines what hardware resources you should allocate
in your IaaS.
For example:

* BOSH needs room to store the releases it deploys.
Larger applications or larger numbers of them require more disk space.

* Larger numbers of active users require more RAM.

Use the UI that your IaaS provides to allocate hardware for your BOSH deployment.

### <a id='aws'></a> AWS ###

AWS describes hardware in terms of  [instance types]
(http://aws.amazon.com/ec2/instance-types/).
Most deployments can start with the **m2.medium** instance type.
For MicroBOSH, **m1.small** is fine for testing but could be inadequate for production.

### <a id='openstack'></a> OpenStack ###

OpenStack describes hardware in terms of [flavors]
(http://docs.openstack.org/trunk/openstack-ops/content/flavors.html).
Choose a flavor with at least three gigabytes of RAM.

### <a id='vsphere'></a> vSphere ###

vSphere describes hardware in terms of RAM, CPU, virtual disk, and other specs.
Refer to the [hardware requirements for Cloud Foundry]
(../deploying/vsphere/hardware_spec.html) topic for help deciding what hardware to use.

## <a id="inbound"></a> Step 2: Restrict Inbound Network Traffic ##

To deploy BOSH on AWS or OpenStack, you must configure security groups.
For vSphere, we recommend configuring multiple networks.
The goal in all cases is to restrict incoming network traffic to the BOSH VM or VMs.

### <a id='aws'></a> AWS and OpenStack  ###

Set up two security groups, **ssh** and **bosh**.
The settings in the following tables are generic; adapt them to your production
needs.

**Note**: In OpenStack Grizzly, there are settings for both `INGRESS` and `EGRESS`
control.
The instructions here apply to `INGRESS` only.
The tables reflect the fact that OpenStack automatically adds port UDP 68 to all
security groups.
For AWS, add this port manually.

#### <a id='ssh'></a> ssh Security Group  ####

<style type="text/css">
.table {font-size:12px;color:#333333; width:100%;border-width: 1px;border-color: #729ea5;border-collapse: collapse;}
.table th {font-size:12px;font-weight: bold;background-color:#acc8cc;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:center;}
.table tr {background-color:#d4e3e5;}
.table td {font-size:12px;width:18%; border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
.table td.left {font-size:12px;width:16%; border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
.table tr:hover {background-color:#ffffff;}
</style>


  <table border="1" class="table" >
  <tr><th>Protocol</th><th>From Port</th><th>To Port</th><th>Source</th><th>User or Purpose</th></tr>
  <tr><td>UDP</td><td>68</td><td>68</td><td>0.0.0.0/0 (CIDR)</td><td>BOOTP/DHCP</td></tr>
  <tr><td>TCP</td><td>22</td><td>22</td><td>0.0.0.0/0 (CIDR)</td><td>SSH</td></tr>
  <tr><td>ICMP</td><td>-1</td><td>-1</td><td>0.0.0.0/0 (CIDR)</td><td>ping</td></tr>
  </table>

#### <a id='bosh'></a> bosh Security Group  ####

  <table border="1" class="table" >
  <tr><th>Protocol</th><th>From Port</th><th>To Port</th><th>Source</th><th>User or Purpose</th></tr>
  <tr><td>TCP</td><td>1</td><td>65535</td><td>bosh</td><td>Members of the bosh Security Group.</td></tr>
  <tr><td>UDP</td><td>53</td><td>53</td><td>0.0.0.0/0 (CIDR)</td><td>Inbound DNS requests.</td></tr>
  <tr><td>UDP</td><td>53</td><td>53</td><td>0.0.0.0/0 (CIDR)</td><td>Inbound DNS requests.</td></tr>
  <tr><td>UDP</td><td>68</td><td>68</td><td>0.0.0.0/0 (CIDR)</td><td>BOOTP/DHCP</td></tr>
  <tr><td>TCP</td><td>4222</td><td>4222</td><td>0.0.0.0/0 (CIDR)</td><td>NATS</td></tr>
  <tr><td>TCP</td><td>6868</td><td>6868</td><td>0.0.0.0/0 (CIDR)</td><td>BOSH Agent</td></tr>
  <tr><td>TCP</td><td>25250</td><td>25250</td><td>0.0.0.0/0 (CIDR)</td><td>BOSH Blobstore</td></tr>
  <tr><td>TCP</td><td>25555</td><td>25555</td><td>0.0.0.0/0 (CIDR)</td><td>BOSH Director</td></tr>
  <tr><td>TCP</td><td>25777</td><td>25777</td><td>0.0.0.0/0 (CIDR)</td><td>BOSH Registry</td></tr>
  </table>

### <a id='vsphere'></a> vSphere ###

vSphere does not support security groups.
Instead, a common practice is to configure multiple networks.
Use one network for BOSH and one or more separate networks for the software
that you deploy with BOSH.

## <a id="network"></a> Step 3: (AWS only) Complete your IaaS Setup  ##

This section explains how to install and use the BOSH CLI commands for setting up AWS infrastructure.

### <a id='plugin'></a> Install the AWS plugin to the BOSH CLI ###

1. Ensure that you have installed the most recent patch of Ruby 1.9.3, which is a prerequisite for installing the BOSH CLI. (Ruby 2.x is not supported.)
1. Create a directory for your planned deployment and navigate to it.
1. Install the BOSH CLI and its MicroBOSH plugin:

    `gem install bosh_cli bosh_cli_plugin_micro bosh_cli_plugin_aws`

    **Note**:  To view the BOSH CLI help, run:

    `bosh help --all`

1. **(Optional)** If you are using the rbenv Ruby environment manager, refresh its list of gems:

    `rbenv rehash`


### <a id='domain-prep'></a> Prepare a domain ###

**Note**: This step is only necessary if you want to use BOSH to deploy Cloud Foundry.

1. Choose a DNS domain name for your deployment.
If you pick **cloud.example.com**, services that you later deploy using BOSH become
available as **service-name.cloud.example.com**.

1. Use the [Route 53 control panel](https://console.aws.amazon.com/route53) to
create an AWS Route 53 Hosted Zone for your domain.
Delegate DNS authority for your domain to the addresses in the “delegation set”
that appears in the control panel.
For example, if your domain is **cloud.example.com**, create an NS record in the
DNS server for `example.com` for each address in the delegation set.

### <a id='set-env'></a> Set environment variables ###

Set environment variables required for deploying to AWS.

1. Create a file called bosh_environment and add the following, changing the
value for each line to suit your configuration:

    ~~~
    export BOSH_VPC_DOMAIN=example.com
    export BOSH_VPC_SUBDOMAIN=cloud # Pick something more unique than 'cloud' to work around a temporary shortcoming of the tool
    export BOSH_AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID
    export BOSH_AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY
    export BOSH_AWS_REGION=us-east-1
    export BOSH_VPC_SECONDARY_AZ=us-east-1a # see note below
    export BOSH_VPC_PRIMARY_AZ=us-east-1d   # see note below
    ~~~

    **Note:** The values shown above correspond to the earlier Route 53 example of
    **cloud.example.com**.
    `BOSH_VPC_DOMAIN` and `BOSH_VPC_SUBDOMAIN` must correspond to the domain name
    you set up when configuring Route 53.
    The only supported value for `BOSH_AWS_REGION` is `us-east-1`.

1. Choose availability zones that are listed as “operating normally” on the
[AWS Console Status Health Section](https://console.aws.amazon.com/ec2/v2/home?region=us-east-1)
for your region.

1. Set the new environment variables for the current shell:

    `source bosh_environment`

1. Create your AWS infrastructure:

	**Note**: Skip this step if you are deploying MicroBOSH.

    <pre class="terminal">
    $ bundle exec bosh aws create
    Executing migration CreateKeyPairs
    allocating 1 KeyPair(s)
    Executing migration CreateVpc
    . . .
    details in S3 receipt: aws_rds_receipt and file: aws_rds_receipt.yml
    Executing migration CreateS3
    creating bucket xxxx-bosh-blobstore
    creating bucket xxxx-bosh-artifacts
    </pre>

The `bosh aws create` command generates the receipt files `aws_rds_receipt.yml`
and `aws_vpc_receipt.yml`, a VPC Internet Gateway, VPC subnets, three RDS
databases, and a NAT VM.

**Note**: RDS database creation may take longer than twenty minutes to finish.

You can remove the NAT VM if you do not plan to deploy Cloud Foundry.

## <a id="validate"></a> Step 4: Validate your IaaS Instance ##

You can validate at least two aspects of your IaaS instance: hardware and
functionality (for example, communication between VMs).

For OpenStack, consider running the [validation procedure]
(../deploying/openstack/validate_openstack.html) described in the Cloud
Foundry documentation.

For AWS or vSphere, consider adapting the parts of the OpenStack procedure
that make sense for your IaaS. Alternatively, you can use the API that your CPI
provides for performing and automating validation.

