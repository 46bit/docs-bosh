---
title: How BOSH Works
---

Once you know what the main elements of BOSH are and what they do,
your understanding of BOSH will remain clear as you learn about supporting elements.

## <a id="high"></a>A High-Level View ##

To understand BOSH, start by assuming that for each major area of functionality, BOSH has a component.
When you think about what BOSH does, you can build up a portrait of BOSH component by component.

Consider the interactions between BOSH and an operator, a cloud, and a distributed service that has been deployed to the cloud using BOSH.

* The operator sends commands to BOSH, which responds with output.
* BOSH communicates with the cloud infrastructure.
* BOSH communicates with the VMs on which the service is running.

Given these interactions, it makes sense that BOSH has:

* A Command Line Interface (CLI) for communication with an operator.
* A Director component that receives commands from the CLI, and in turn communicates with other BOSH components to realize the intent of the operator. The Director also keeps track of the state of the VMs.
* A Blobstore component where BOSH can store code that has been uploaded and needs to be deployed.
* A Cloud Provider Interface (CPI) that BOSH uses to communicate with the cloud infrastructure.

Finally, every VM for the service that was deployed using BOSH has a BOSH Agent.
The Agent is a process that is always running when the VM is alive.
BOSH communicates with a VM by "talking to" the Agent.

Now you know the main elements of BOSH.
The components to be introduced next all exist to help the CLI, Director, Blobstore and CPI function as a system.

## <a id="components"></a> Components in Supporting Roles  ##

This section describes the smaller BOSH components that facilitate the work of the main elements.

### <a id="dns"></a> PowerDNS name server ###

For internal communication between the VMs that it creates, BOSH allows named DNS records.
This means that instead of an IP address, one component could communicate with another by a host and domain name, for example:

  `http://postgres-db.my-deployment.com`

PowerDNS is the Open Source DNS server that BOSH runs if you use this feature.

### <a id="nats"></a> Messaging (NATS) ###

The Director and the Agents communicate through a lightweight publish-subscribe and distributed queueing messaging system called NATS.
Messages are posted both ways to confirm health of the agent and for the director to obtain changes in health of monitored processes.

### <a id="postgres"></a> Postgres database ###

The Director uses a Postgres database to store information about the desired state of the deployed system(s).
This includes what releases are present, what has been deployed, what stemcells are available, and so on.

### <a id="redis"></a> Redis key-value store ###

The Director queues the names of tasks that it needs to run.
The queue resides in a Redis key-value store.

### <a id="registry"></a>Registry ###

Agents obtain configuration information for their VMs, such as disk IDs and networking settings, in different ways depending on cloud infrastructure.
Some cloud infrastructures use the Registry for this purpose.
The process goes like this:

1. i talk to the IaaS and it says here’s your IP and stuff
1. … process puts that into registry
1. Agent can ask the Registry through its endpoint

### <a id="hm"></a> Health Monitor  ###

For a variety of reasons, VMs may die or otherwise get into a bad state.
For example, if a process gobbles up all the resources available to a VM, the Agent for that VM can become unresponsive.

Health Monitor continuously monitors the state of the VMs.
Based on data from Health Monitor, two BOSH plugins can attempt to return VMs to a desired state.

* The BOSH Resurrector can be enabled to automatically recreate VMs that disappear or whose Agent becomes unresponsive.
* `bosh cck` is a CLI command that the user can run to fix various issues that can arise in a distributed system.

pulls actual VM state from database and compares it with desired VM state as described in manifests, then queues tasks to recreate or VMs when needed

### <a id="stem"></a> More about the Stemcell  ###

_insert text here_

## <a id="director"></a> more about the Director ##


* Director worker processes
When translating commands from the CLI into actionable tasks or running a scheduled process, the director chunks the work into processes that are then queued, and picked up by worker processes.  Those processes then do the heavy lifting to create VMs, provision VMs as a particular job, or whatever is needed at the time

