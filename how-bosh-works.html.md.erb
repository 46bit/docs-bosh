---
title: How BOSH Works
---

Once you know what the main elements of BOSH are and what they do,
your understanding of BOSH will remain clear as you learn about supporting elements.

## <a id="high"></a>A High-Level View ##

To understand BOSH, start by assuming that for each major area of functionality, BOSH has a component.
When you think about what BOSH does, you can build up a portrait of BOSH component by component.

Consider the interactions between BOSH and an operator, a cloud, and a distributed service that has been deployed to the cloud using BOSH.

* The operator sends commands to BOSH, which responds with output.
* BOSH communicates with the cloud infrastructure.
* BOSH communicates with the VMs on which the service is running.

Given these interactions, it makes sense that BOSH has:

* A Command Line Interface (CLI) for communication with an operator.
* A Director component that receives commands from the CLI, and in turn communicates with other BOSH components to realize the intent of the operator. The Director also keeps track of the state of the VMs.
* A Blobstore component where BOSH can store code that has been uploaded and needs to be deployed.
* A Cloud Provider Interface (CPI) that BOSH uses to communicate with the cloud infrastructure.

The Director translates commands from the CLI into actionable tasks, chunking the work into tasks that it then queues.
Tasks are taken out of the queue and run by a special kind of BOSH process called a Worker.
Creating and provisioning VMs are among the kinds of tasks that Workers perform.
Besides tasks that originate with user commands, Workers perform tasks that the Director creates from scheduled system processes.

Every VM for the service that was deployed using BOSH has a BOSH Agent.
The Agent is a process that is always running when the VM is alive.
BOSH communicates with a VM by "talking to" the Agent.

Now you know the main elements of BOSH.
The components to be introduced next all exist to help the main elements function as a system.

## <a id="components"></a> Components in Supporting Roles  ##

This section describes the BOSH components that facilitate the work of the CLI, Director, Blobstore and CPI.

### <a id="hm"></a> Health Monitor  ###

For a variety of reasons, VMs may die or otherwise get into a bad state.
For example, if a process gobbles up all the resources available to a VM, the Agent for that VM can become unresponsive.

Health Monitor continuously monitors the state of the VMs.
Based on data from Health Monitor, two BOSH plugins can attempt to return VMs to a desired state.

* The BOSH Resurrector can be enabled to automatically recreate VMs that disappear or whose Agent becomes unresponsive.
* BOSH Cloud Check (`bosh cck`) is a CLI command that the user can run to fix a wide variety issues that can arise in a distributed system.

### <a id="nats"></a> Messaging (NATS) ###

The Director and the Agents communicate through a lightweight publish-subscribe and distributed queueing messaging system called NATS.
These messages have two purposes: to confirm the health of the Agent, and to inform the Director about changes in the health of monitored processes.

### <a id="dns"></a> PowerDNS name server ###

For internal communication between the VMs that it creates, BOSH allows named DNS records.
This means that instead of an IP address, one component could communicate with another by a host and domain name, for example:

    `http://postgres-db.my-deployment.com`

PowerDNS is the Open Source DNS server that BOSH runs if you use this feature.

### <a id="postgres"></a> Postgres database ###

The Director uses a Postgres database to store information about the desired state of the deployed system(s).
This includes what releases are present, what has been deployed, what stemcells are available, and so on.

### <a id="redis"></a> Redis key-value store ###

The Director queues the names of tasks that it needs to run.
The queue resides in a Redis key-value store.

### <a id="registry"></a>Registry ###

When a VM is created, it has no "awareness" of its own IP address or other vital information, including:

* an ID for the VM
* an ID for the volume reserved for the VM
* IDs for disks and other devices
* the network interface IP

Agents obtain configuration information for their VMs in different ways, depending on cloud infrastructure.
Some cloud infrastructures use the Registry for this purpose.
Agents send requests to the Registry through its HTTP endpoint.

The interaction between IaaS, Agent, Registry, and Worker follows this pattern:

1. Through the CPI, a Worker tells the IaaS to create or update a VM.
1. The IaaS provides the Worker with information the VM needs.
1. The Worker updates the Registry with the information.
1. The Agent sends an information request to the Registry.
1. The Registry responds by providing the requested information.
1. The Agent uses the information to configure the VM.


