---
title: Deploying MicroBOSH to AWS
---

This topic explains how to deploy MicroBOSH to Amazon Web Services (AWS).

Before you begin, install the [BOSH Command Line Interface (CLI)](./bosh-cli.html).

## <a id="prepare-aws"></a>Step 1: Prepare AWS ##

If you do not have an AWS account, [create one](http://goo.gl/MaAybK).

To configure AWS for MicroBOSH:

* [Obtain AWS credentials](#credentials)
* [Create a Key Pair](#create-key-pair)
* [Create a Virtual Private Cloud](#create-vpc)
* [Create an Elastic IP](#create-eip)
* [Create and configure Security Groups](#create-security)

### <a id="credentials"></a>Obtain AWS credentials ###

Your AWS credentials consist of an `access_key_id` and a `secret_access_key`.
If you already know your AWS credentials you can skip this step.
You use the `access_key_id` and `secret_access_key` when creating the deployment
manifest.

1. Log into the AWS console:
[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home).

    <%= image_tag("images/micro-aws/aws-console.png") %>

1. Click your account name and select **Security Credentials**.

    <%= image_tag("images/micro-aws/seccred-drop.png") %>

1. In the AWS IAM confirmation box, click **Continue to Security Credentials** to display the Security Credentials page.

    <%= image_tag("images/micro-aws/iam-confirm.png") %>

1. Expand the **Access Keys** section.

    <%= image_tag("images/micro-aws/access-key.png") %>

1. Click **Create New Access Key**.

    <%= image_tag("images/micro-aws/create-key.png") %>

1. In the Create Access Key dialog box, click **Download Key File**.

1. Save the Key File.

1. Close the dialog box.

1. Open the downloaded Key File in a text editor. Record the value of
**AWSAccessKeyId** as your `access_key_id` and **AWSSecretKey** as your
`secret_access_key` for use in [Step 2: Create the Deployment Manifest](#create-manifest).

    Example:

    <%= image_tag("images/micro-aws/record-key.png") %>

    In this example, the `access_key_id` is _BM456AB123C2GZFTQQHA_ and
    `secret_access_key` is _L2lCSPI9zp7nAzFraZaMonf1OxddoO5Iaaqutx3n_.

### <a id="create-key-pair"></a>Create a Key Pair ###

1. In the AWS Console, select **EC2**.

1. Click **Key Pairs**.

    <%= image_tag("images/micro-aws/key-pairs.png") %>

1. Click **Create Key Pair**.

    <%= image_tag("images/micro-aws/create-key-pair.png") %>

1. In the Create Key Pair dialog box, enter “bosh” as the Key Pair name.

    <%= image_tag("images/micro-aws/name-key-pair.png") %>

1. Click **Create**.

1. Save the bosh.pem file.

    <%= image_tag("images/micro-aws/save-pem.png") %>

1. Rename this file to `bosh` and save it in the `~/.ssh` folder on your
computer.
For example, on OS X you can do this from the terminal:

<pre class="terminal">
  mv ~/Downloads/bosh.pem ~/.ssh/bosh
</pre>

### <a id="create-vpc"></a>Create a Virtual Private Cloud ###

1. On the AWS Console, select **VPC**.

1. Set the AWS Region to **US East (N. Virginia)**.

1. Click **Start VPC Wizard**.

    <%= image_tag("images/micro-aws/vpc-wizard.png") %>

1. Select **VPC with a Single Public Subnet** and click **Select**.

1. Fill out the VPC form with the following information:
    * **IP CIDR block:** 10.0.0.0/16
    * **VPC name:** microbosh
    * **Public subnet:** 10.0.0.0/24
    * **Availability zone:** us-east-1b
    * **Subnet name:** microbosh
    * **Enable DNS hostnames:** Yes
    * **Hardware tenancy:** Default

        <%= image_tag("images/micro-aws/vpc.png") %>

1. Click **Create VPC**.

1. Click **Subnets**.

1. Record the **Subnet ID** created for the ‘microbosh’ VPC for use in [Step 2: Create the Deployment Manifest](#create-manifest).

    <%= image_tag("images/micro-aws/subnet.png") %>

### <a id="create-eip"></a>Create an Elastic IP ###

1. On the VPC Dashboard, click **Elastic IPs**.

1. Click **Allocate New Address**.

1. In the Allocate Address dialog box, select the **EC2-VPC** network platform.
Click **Yes, Allocate**.

    <%= image_tag("images/micro-aws/allocate-eip.png") %>

1. Record the Elastic IP **Address** for use in [Step 2: Create the Deployment Manifest](#create-manifest).

### <a id="create-security"></a>Create and Configure Security Groups ###

1. On the VPC Dashboard, click **Security Groups**.

1. Click **Create Security Group**.

1. Fill out the Security Group form with the following information:
    * **Name tag:** bosh
    * **Group Name:** bosh
    * **Description:** BOSH Security Group
    * **VPC:** Select the ‘microbosh’ VPC created in [Create a Virtual Private Cloud](#create-vpc).

    The **Group Name** is used to define the default security groups in [Step 2: Create the Deployment Manifest](#create-manifest).

    <%= image_tag("images/micro-aws/create-security.png") %>

1. Click **Yes, Create**.

1. Ensure the BOSH Security Group is selected and click the **Inbound Rules**
tab.

    <%= image_tag("images/micro-aws/edit-rules.png") %>

1. Click **Edit**.

1. MicroBOSH needs ports 25555 (BOSH Director), 6868 (BOSH Agent) and 22 (SSH to
debug) opened for inbound traffic. Add the following rules:

    <table border="1" class="nice" >
	<tr>
		<th><b>Type</b></th>
		<th></b>Port Range</b></th>
		<th><b>Source</b></th>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>25555</td><td>0.0.0.0/0</td>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>6868</td><td>0.0.0.0/0</td>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>22</td><td>0.0.0.0/0</td>
	</tr>
    </table>

1. Click **Save**.

    **Note**: Ensure that the **Save Successfully** message displays. You may
    have to refresh the page to view the updated inbound rules.

## <a id="create-manifest"></a>Step 2: Create Deployment Manifest ##

The MicroBOSH deployment manifest is a YAML file that defines the components and
properties of the deployment. Create a manifest for your deployment as follows:

1. Create a local "deployments" directory to store your manifest.

    <pre class='terminal'>
    $ mkdir ~/workspace/deployments
    </pre>

1. Download the MicroBOSH deployment manifest [template](./microbosh.yml) to
your "deployments" directory. If necessary, rename the template file as
`microbosh.yml`.

1. Open the `microbosh.yml` file in a text editor. Replace the following
properties in the template with the relevant information from AWS:

* ELASTIC-IP-ADDRESS
* MICROBOSH-SUBNET-ID
* ACCESS-KEY-ID
* SECRET-ACCESS-KEY

Use the **Group Name** of the VPC Security Group, not the security group ID, as
the value for the `default_security_group`.

The MicroBOSH deployment manifest template:

<pre class='terminal'>
---
name: microbosh
logging:
level: debug

network:
  type: manual
  vip: ELASTIC-IP-ADDRESS # Replace with your Elastic IP address
  ip: 10.0.0.6
  dns:
  - 10.0.0.2
  cloud_properties:
    subnet: MICROBOSH-SUBNET-ID # Replace with your MicroBOSH subnet ID

resources:
  persistent_disk: 20000
  cloud_properties:
    instance_type: m1.small
    availability_zone: us-east-1b

cloud:
  plugin: aws
  properties:
    aws:
      access_key_id: ACCESS-KEY-ID # Replace with your AWSAccessKeyId
      secret_access_key: SECRET-ACCESS-KEY # Replace with your AWSSecretKey
      default_key_name: bosh
      default_security_groups: ["bosh"]
      region: us-east-1
      ec2_private_key: ~/.ssh/bosh

apply_spec:
  agent:
    blobstore:
      address: 10.0.0.6
    nats:
      address: 10.0.0.6
  properties:
    registry:
      address: 10.0.0.6
</pre>

## <a id="create-manifest"></a>Step 3: Download MicroBOSH stemcell and extract AMI Identifier ##

1. In a terminal window, run `bosh public stemcells` from your "deployments"
directory to see a list of publicly available BOSH stemcells.

    <pre class='terminal'>
    $ bosh public stemcells
    +-------------------------------------------------------------+
    | Name                                                        |
    +-------------------------------------------------------------+
    | bosh-stemcell-2427-aws-xen-ubuntu.tgz                       |
    | bosh-stemcell-2479-aws-xen-ubuntu-lucid.tgz                 |
    | bosh-stemcell-2479-aws-xen-ubuntu-trusty-go_agent.tgz       |
    | light-bosh-stemcell-2427-aws-xen-ubuntu.tgz                 |
    | light-bosh-stemcell-2479-aws-xen-centos.tgz                 |
    | light-bosh-stemcell-2479-aws-xen-centos-go_agent.tgz        |
    | bosh-stemcell-2479-vsphere-esxi-centos-go_agent.tgz         |
    | bosh-stemcell-53-warden-boshlite-ubuntu.tgz                 |
    +-------------------------------------------------------------+
</pre>

1. BOSH stemcell names include the type, BOSH build number, target IaaS and hypervisior, and underlying operating system. Run `bosh download public stemcell STEMCELL-NAME` to download any "light-bosh" stemcell for aws-xen-ubuntu.

    Example:

    <pre class='terminal'>
    $ bosh download public stemcell light-bosh-stemcell-2427-aws-xen-ubuntu.tgz
    </pre>

1. Extract the `stemcell.MF` file from the stemcell. Open `stemcell.MF` in a text editor.

1. The `stemcell.MF` contains an Amazon Machine Image (AMI) identifier.
The BOSH CLI uses the AMI identifier to deploy MicroBOSH to AWS.
Record the AMI identifier for use in [Step 4 Deploy MicroBOSH to AWS](#deploy).

    In this example `stemcell.MF` file, the AMI identifier is `ami-03223a6a`:

    <pre class='terminal'>
---
name: bosh-aws-xen-ubuntu
version: '2427'
bosh_protocol: 1
sha1: 314424dae3462a1ffcfcdf650bff5ce7ecc7cb80
cloud_properties:
  name: bosh-aws-xen-ubuntu
  version: '2427'
  infrastructure: aws
  architecture: x86_64
  root_device_name: /dev/sda1
  ami:
    us-east-1: ami-03223a6a  # This is the Amazon Machine Image (AMI) identifier
    </pre>

## <a id="deploy"></a>Step 4: Deploy MicroBOSH ##

1. In a terminal window, run `bosh micro deployment microbosh.yml` from your
"deployments" directory to instruct MicroBOSH to use your manifest file.

    <pre class='terminal'>
    $ bosh micro deployment microbosh.yml
    WARNING! Your target has been changed to https://54.86.66.111:25555!
    Deployment set to ~workspace/deployment/microbosh.yml
    </pre>

    **Note**: The `WARNING!` message alerts you to a change in the targeted
	IP address, and is not an error message.

1. Use `bosh micro deploy AMI-IDENTIFIER` to deploy MicroBOSH using the AMI
identifier from the downloaded stemcell.

    **Note**: A red `No bosh-deployments.yml file found` warning is expected.
    If prompted to allow MicroBOSH to "save state" in the current directory,
    type **yes**.

    <pre class='terminal'>
    $ bosh micro deploy ami-03223a6a

    No 'bosh-deployments.yml' file found in current directory.

    Conventionally, 'bosh-deployments.yml' should be saved in ~/workspace.
    Is ~/workspace/deployments a directory where you can save state? (type 'yes' to continue): yes

    Deploying new micro BOSH instance ~/workspace/deployments/microbosh.yml to 'https://54.86.66.111:25555' (type 'yes' to continue): yes
      Started deploy micro bosh
      ...
      Done deploy micro bosh
    Deployed '~/workspace/deployments/microbosh.yml' to 'https://54.86.66.111:25555', took 00:04:51 to complete
    </pre>

1. Use `bosh target ELASTIC-IP-ADDRESS` to log into your new MicroBOSH server.
The default username and password are `admin` and `admin`.

    <pre class="terminal">
    $ bosh target 54.86.66.111
    Target set to 'microbosh'
    Your username: admin
    Enter password: *****
    Logged in as 'admin'
    </pre>

## <a id="troubleshooting"></a>Basic Troubleshooting ##

If the deployment fails, run `bosh micro delete`, then deploy again.

If you see an error message that refers to your `access key signature`, check
the accuracy of the ACCESS-KEY-ID and SECRET-ACCESS-KEY in the deployment
manifest.

If you see other error messages:

* Check your `microbosh.yml` for errors.
* Review your AWS configuration.