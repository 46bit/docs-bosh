---
title: Deploying MicroBOSH to AWS
---

This guide explains how to deploy MicroBOSH to Amazon Web Services (AWS).

Before you begin, install the [BOSH Command Line Interface (CLI)](./bosh-cli.html).

## <a id="prepare-aws"></a>Step 1: Prepare AWS ##

If you do not have an AWS account, [create one](http://goo.gl/MaAybK).

To configure AWS for MicroBOSH:

* [Obtain AWS credentials](#credentials)
* [Create a Key Pair](#create-key-pair)
* [Create a Virtual Private Cloud](#create-vpc)
* [Create an Elastic IP](#create-eip)
* [Create and configure Security](#create-security)

### <a id="credentials"></a>Obtain AWS credentials ###

Your AWS credentials consist of an `access_key_id` and a `secret_access_key`.
If you already know your AWS credentials you can skip this step.
You use the `access_key_id` and `secret_access_key` when creating the deployment
manifest.

1. Log into the AWS console:
[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home).

    <%= image_tag("images/micro-aws/aws-console.png") %>

1. Click your account name and select **Security Credentials** to display the
Security Credentials page.

    <%= image_tag("images/micro-aws/seccred-drop.png") %>

1. Expand the **Access Keys** section.

    <%= image_tag("images/micro-aws/access-key.png") %>

1. Click **Create New Access Key**.

    <%= image_tag("images/micro-aws/create-key.png") %>

1. In the Create Access Key dialog box, click **Download Key File**.

1. Save the Key File.

1. Close the dialog box.

### <a id="create-key-pair"></a>Create a Key Pair ###

1. In the AWS Console, select **EC2**.

1. Click **Key Pairs**.

    <%= image_tag("images/micro-aws/key-pairs.png") %>

1. Click **Create Key Pair**.

    <%= image_tag("images/micro-aws/create-key-pair.png") %>

1. In the Create Key Pair dialog box, enter “bosh” as the Key Pair name.

    <%= image_tag("images/micro-aws/name-key-pair.png") %>

1. Click **Create**.

1. Save the bosh.pem file.

    <%= image_tag("images/micro-aws/save-pem.png") %>

1. Rename this file to `bosh` and save it in the `~/.ssh` folder on your computer.
For example, on OSX you can do this from the terminal:

<pre class="terminal">
  mv ~/Downloads/bosh.pem ~/.ssh/bosh
</pre>

### <a id="create-vpc"></a>Create a Virtual Private Cloud ###

1. On the AWS Console, select **VPC**.

1. Set the AWS Region to **US East (N. Virginia)**.

1. Click **Start VPC Wizard**.

    <%= image_tag("images/micro-aws/vpc-wizard.png") %>

1. Select **VPC with a Single Public Subnet** and click **Select**.

1. Fill out the VPC form with the following information:
    * **IP CIDR block:** 10.0.0.0/16
    * **VPC name:** microbosh
    * **Public subnet:** 10.0.0.0/24
    * **Availability zone:** us-east-1b
    * **Subnet name:** microbosh
    * **Enable DNS hostnames:** Yes
    * **Hardware tenancy:** Default

        <%= image_tag("images/micro-aws/vpc.png") %>

1. Click **Create VPC**.

1. Click **Subnets**.

1. Record the **Subnet ID** created for the ‘microbosh’ VPC for use in [Step 2: Create the Deployment Manifest](#create-manifest).

    <%= image_tag("images/micro-aws/subnet.png") %>

### <a id="create-eip"></a>Create an Elastic IP ###

1. On the VPC Dashboard, click **Elastic IPs**.

1. Click **Allocate New Address**.

1. In the Allocate Address dialog box, select the **EC2-VPC** network platform.
Click **Yes, Allocate**.

    <%= image_tag("images/micro-aws/allocate-eip.png") %>

1. Record the Elastic IP **Address** for use in [Step 2: Create the Deployment Manifest](#create-manifest).

### <a id="create-security"></a>Create and Configure Security ###

1. On the VPC Dashboard, click **Security Groups**.

1. Click **Create Security Group**.

1. Fill out the Security Group form with the following information:
    * **Name tag:** bosh
    * **Group Name:** bosh
    * **Description:** BOSH Security Group
    * **VPC:** Select the ‘microbosh’ VPC created in [Create a Virtual Private Cloud](#create-vpc).

        <%= image_tag("images/micro-aws/create-security.png") %>

1. Click **Yes, Create**.

1. Select the BOSH Security Group and click the **Inbound Rules** tab.

    <%= image_tag("images/micro-aws/edit-rules.png") %>

1. Click **Edit**.

1. MicroBOSH needs ports 25555 (BOSH Director), 6868 (BOSH Agent) and 22 (SSH to
debug) opened for inbound traffic. Add the following rules:

    <table border="1" class="nice" >
	<tr>
		<th><b>Type</b></th>
		<th></b>Port Range</b></th>
		<th><b>Source</b></th>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>25555</td><td>0.0.0.0/0</td>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>6868</td><td>0.0.0.0/0</td>
	</tr>
	<tr>
	  <td>Custom TCP Rule</td><td>22</td><td>0.0.0.0/0</td>
	</tr>
    </table>

1. Click **Save**.

## <a id="create-manifest"></a>Step 2: Create Deployment Manifest ##

The MicroBOSH deployment manifest is a YAML file that defines the components and
properties of the deployment.

Use the MicroBOSH deployment manifest template to create a deployment manifest
named `micro_bosh.yml`.
Replace the following properties in the template with the relevant information
from AWS:

* ELASTIC-IP-ADDRESS
* MICROBOSH-SUBNET-ID
* ACCESS-KEY-ID
* SECRET-ACCESS-KEY

The MicroBOSH deployment manifest template:

<pre class='terminal'>
---
name: micro-bosh

logging:
level: debug

network:
  type: manual
  vip:  ELASTIC-IP-ADDRESS
  ip: 10.0.0.6
  dns:
  - 10.0.0.2
  cloud_properties:
    subnet: MICROBOSH-SUBNET-ID

resources:
  persistent_disk: 20000
  cloud_properties:
    instance_type: m1.small
    availability_zone: us-east-1b

cloud:
  plugin: aws
  properties:
    aws:
      access_key_id: ACCESS-KEY-ID
      secret_access_key: SECRET-ACCESS-KEY
      default_key_name: bosh
      default_security_groups: ["bosh"]
      region: us-east-1
      ec2_private_key: ~/.ssh/bosh

apply_spec:
  agent:
    blobstore:
      address: 10.0.0.6
    nats:
      address: 10.0.0.6
  properties:
    registry:
      address: 10.0.0.6
</pre>

## <a id="create-manifest"></a>Step 3: Download MicroBOSH stemcell and extract AMI ID ##

1. In a terminal window, run `bosh public stemcells` to see a list of publicly available BOSH stemcells.

    <pre class='terminal'>
    $ bosh public stemcells
    +-------------------------------------------------------------+
    | Name                                                        |
    +-------------------------------------------------------------+
    | bosh-stemcell-2427-aws-xen-ubuntu.tgz                       |
    | bosh-stemcell-2479-aws-xen-ubuntu-lucid.tgz                 |
    | bosh-stemcell-2479-aws-xen-ubuntu-trusty-go_agent.tgz       |
    | light-bosh-stemcell-2427-aws-xen-ubuntu.tgz                 |
    | light-bosh-stemcell-2479-aws-xen-centos.tgz                 |
    | light-bosh-stemcell-2479-aws-xen-centos-go_agent.tgz        |
    | bosh-stemcell-2479-vsphere-esxi-centos-go_agent.tgz         |
    | bosh-stemcell-53-warden-boshlite-ubuntu.tgz                 |
    +-------------------------------------------------------------+
</pre>

1. Run `bosh download public stemcell` to download the latest light-bosh version for aws-xen-ubuntu. Example:

    <pre class='terminal'>
    $ bosh download public stemcell light-bosh-stemcell-2427-aws-xen-ubuntu.tgz
    </pre>

1. Extract the `stemcell.MF` file from the stemcell. Open `stemcell.MF` in a text editor.

1. The `stemcell.MF` contains the Amazon Machine Image (AMI) identifier for this
version of MicroBOSH.
BOSH CLI uses the BOSH AMI ID to deploy MicroBOSH to AWS.
Record the AMI identifier for use in [Step 4 Deploy MicroBOSH to AWS](#deploy).

In this example `stemcell.MF` file, the AMI ID is `ami-03223a6a`:

<pre class='terminal'>
---
name: bosh-aws-xen-ubuntu
version: '2427'
bosh_protocol: 1
sha1: 314424dae3462a1ffcfcdf650bff5ce7ecc7cb80
cloud_properties:
  name: bosh-aws-xen-ubuntu
  version: '2427'
  infrastructure: aws
  architecture: x86_64
  root_device_name: /dev/sda1
  ami:
    us-east-1: ami-03223a6a  # This is the Amazon Machine Image (AMI) identifier
</pre>

## <a id="deploy"></a>Step 4: Deploy MicroBOSH ##

1. Use `bosh micro deployment PATH-TO-micro_bosh.yml` to set MicroBOSH to use your manifest file.

    In the following example, `micro_bosh.yml` is located in `~/workspace/my-deployment`:

    <pre class='terminal'>
    $ bosh micro deployment ~/workspace/my-deployment/micro_bosh.yml
    WARNING! Your target has been changed to https://54.86.66.111:25555!
    Deployment set to ~workspace/my-deployment/micro_bosh.yml
    </pre>

    **Note**: The `WARNING!` message alerts you to a change in targeted Elastic IP address, and is not an error message.

1. Use `bosh micro deploy AMI-ID` to deploy MicroBOSH using the AMI ID from the
downloaded stemcell.

    Example:

    <pre class='terminal'>
    $ bosh micro deploy ami-03223a6a
    Deploying new micro BOSH instance ~/workspace/my-deployments/micro_bosh.yml to 'https://54.86.66.111:25555' (type 'yes' to continue): yes
      Started deploy micro bosh
      ...
      Done deploy micro bosh
    Deployed '~/workspace/my-deployments/micro_bosh.yml' to 'https://54.86.66.111:25555', took 00:04:51 to complete
    </pre>

1. Use `bosh target ELASTIC-IP-ADDRESS` to log into your new MicroBOSH server.
The default username and password are `admin` and `admin`.

    Example:

    <pre class="terminal">
    $ bosh target 54.86.66.111
    Target set to 'micro-bosh'
    Your username: admin
    Enter password: *****
    Logged in as 'admin'
    </pre>

## <a id="troubleshooting"></a>Basic Troubleshooting ##

If the deployment fails, run `bosh micro delete`, then deploy again.

If you see an error message that refers to your `access key signature`, check
the accuracy of the ACCESS-KEY-ID and SECRET-ACCESS-KEY in the deployment
manifest.

If you see other error messages:

* Check your `micro_bosh.yml` for errors.
* Review your AWS configuration.