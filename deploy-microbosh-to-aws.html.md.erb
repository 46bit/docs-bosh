---
title: Deploying MicroBOSH to AWS
---

This topic explains how to deploy MicroBOSH to Amazon Web Services (AWS).

## <a id="create-manifest"></a>Step 1: Create Deployment Manifest ##

The MicroBOSH deployment manifest is a YAML file that defines the components and
properties of the deployment. Create a manifest for your deployment as follows:

1. Create a local deployment directory to store your manifest.

    <pre class='terminal'>
    $ mkdir ~/my-micro-deployment
    </pre>

1. Create a deployment manifest YAML file (in our example we named ours
`manifest.yml`), and save it to your deployment directory.

Use this MicroBOSH deployment manifest template:

<pre class='terminal'>
---
name: microbosh

network:
  type: manual
  vip: ELASTIC-IP-ADDRESS # Replace with your Elastic IP address
  ip: 10.0.0.6
  dns: [10.0.0.2]
  cloud_properties:
    subnet: MICROBOSH-SUBNET-ID # Replace with your MicroBOSH subnet ID

resources:
  persistent_disk: 20000
  cloud_properties:
    instance_type: m1.small
    availability_zone: us-east-1b

cloud:
  plugin: aws
  properties:
    aws:
      access_key_id: ACCESS-KEY-ID # Replace with your AWSAccessKeyId
      secret_access_key: SECRET-ACCESS-KEY # Replace with your AWSSecretKey
      default_key_name: bosh
      default_security_groups: ["bosh"]
      region: us-east-1
      ec2_private_key: bosh.pem # Path relative to the manifest file

apply_spec:
  agent:
    blobstore: {address: 10.0.0.6}
    nats: {address: 10.0.0.6}
  properties:
    registry: {address: 10.0.0.6}
</pre>

## <a id="prepare-aws"></a>Step 2: Prepare AWS Account ##

If you do not have an AWS account, [create one](http://goo.gl/MaAybK).

To configure AWS Account for MicroBOSH:

* [Obtain AWS credentials](#credentials)
* [Create a Key Pair](#create-key-pair)
* [Create a Virtual Private Cloud](#create-vpc)
* [Create an Elastic IP](#create-eip)
* [Create and configure Security Groups](#create-security)

### <a id="credentials"></a>Obtain AWS credentials ###

Your AWS credentials consist of an `access_key_id` and a `secret_access_key`.
If you already know your AWS credentials you can skip this step and update 
`access_key_id` and `secret_access_key` in your MicroBOSH deployment manifest.

1. Log into the AWS console:
[https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home).

    <%= image_tag("images/micro-aws/aws-console.png") %>

1. Click your account name and select **Security Credentials**.

    <%= image_tag("images/micro-aws/seccred-drop.png") %>

1. In the AWS IAM confirmation box, click **Continue to Security Credentials** to display the 
Security Credentials page.

    <%= image_tag("images/micro-aws/iam-confirm.png") %>

1. Expand the **Access Keys** section.

    <%= image_tag("images/micro-aws/access-key.png") %>

1. Click **Create New Access Key**.

    <%= image_tag("images/micro-aws/create-key.png") %>

1. In the Create Access Key dialog box, click **Download Key File**.

1. Save the Key File.

1. Close the dialog box.

1. Open the downloaded Key File in a text editor. Update `access_key_id` 
(replace ACCESS-KEY-ID) and `secret_access_key` (replace SECRET-ACCESS-KEY)
in your MicroBOSH deployment manifest with values from the Key File.

    Example:

    <%= image_tag("images/micro-aws/record-key.png") %>

    In this example, the `access_key_id` is _BM456AB123C2GZFTQQHA_ and
    `secret_access_key` is _L2lCSPI9zp7nAzFraZaMonf1OxddoO5Iaaqutx3n_.

### <a id="create-key-pair"></a>Create a Key Pair ###

1. In the AWS Console, select **EC2**.

1. Click **Key Pairs**.

    <%= image_tag("images/micro-aws/key-pairs.png") %>

1. Click **Create Key Pair**.

    <%= image_tag("images/micro-aws/create-key-pair.png") %>

1. In the Create Key Pair dialog box, enter “bosh” as the Key Pair name.

    <%= image_tag("images/micro-aws/name-key-pair.png") %>

1. Click **Create**.

1. Save the bosh.pem file.

    <%= image_tag("images/micro-aws/save-pem.png") %>

1. Move bosh.pem file into local deployment directory. For example, on UNIX you can do this from the terminal:

    <pre class="terminal">
      mv ~/Downloads/bosh.pem ~/my-aws-deployment/bosh.pem
    </pre>

### <a id="create-vpc"></a>Create a Virtual Private Cloud ###

1. On the AWS Console, select **VPC**.

1. Currently, light stemcells are only available from US East. If you would like to use
a light stemcell, set the AWS Region to **US East (N. Virginia)**. We will assume US East
for this tutorial.

1. Click **Start VPC Wizard**.

    <%= image_tag("images/micro-aws/vpc-wizard.png") %>

1. Select **VPC with a Single Public Subnet** and click **Select**.

1. Fill out the VPC form with the following information:
    * **IP CIDR block:** 10.0.0.0/16
    * **VPC name:** microbosh
    * **Public subnet:** 10.0.0.0/24
    * **Availability zone:** us-east-1b
    * **Subnet name:** microbosh
    * **Enable DNS hostnames:** Yes
    * **Hardware tenancy:** Default

        <%= image_tag("images/micro-aws/vpc.png") %>

1. Click **Create VPC**.

1. Click **Subnets**.

1. Fill in the **subnet** (replace `MICROBOSH-SUBNET-ID`) in your deployment manifest with the **Subnet ID** shown. 

    <%= image_tag("images/micro-aws/subnet.png") %>

### <a id="create-eip"></a>Create an Elastic IP ###

1. On the VPC Dashboard, click **Elastic IPs**.

1. Click **Allocate New Address**.

1. In the Allocate Address dialog box, select the **EC2-VPC** network platform.
Click **Yes, Allocate**.

    <%= image_tag("images/micro-aws/allocate-eip.png") %>

1. Fill in **vip** (replace `ELASTIC-IP-ADDRESS`) in your Deployment Manifest with the Elastic IP **Address** that is allocated.

### <a id="create-security"></a>Create and Configure Security Groups ###

1. On the VPC Dashboard, click **Security Groups**.

1. Click **Create Security Group**.

1. Fill out the Security Group form with the following information:
    * **Name tag:** bosh
    * **Group Name:** bosh
    * **Description:** BOSH Security Group
    * **VPC:** Select the ‘microbosh’ VPC created in [Create a Virtual Private Cloud](#create-vpc).

    The **Group Name** is used to define the default security groups in [Step 2: Create the Deployment Manifest](#create-manifest).

    <%= image_tag("images/micro-aws/create-security.png") %>

1. Click **Yes, Create**.

1. Ensure the BOSH Security Group is selected and click the **Inbound Rules** tab.

    <%= image_tag("images/micro-aws/edit-rules.png") %>

1. Click **Edit**.

1. MicroBOSH needs ports 25555 (BOSH Director), 6868 (BOSH Agent), and 22 (SSH to
debug) opened for inbound traffic. In addition, BOSH deployed VMs might need access 
to all TCP and UDP ports from within the same Security Group. Add the following rules:

    <table border="1" class="nice" >
    	<tr>
    		<th><b>Type</b></th>
    		<th></b>Port Range</b></th>
    		<th><b>Source</b></th>
    	</tr>
    	<tr>
    	  <td>Custom TCP Rule</td><td>25555</td><td>0.0.0.0/0</td>
    	</tr>
    	<tr>
    	  <td>Custom TCP Rule</td><td>6868</td><td>0.0.0.0/0</td>
    	</tr>
    	<tr>
    	  <td>Custom TCP Rule</td><td>22</td><td>0.0.0.0/0</td>
    	</tr>
    	<tr>
    	  <td>Custom TCP Rule</td><td>ALL</td><td>ID of this security group</td>
    	</tr>
    	<tr>
    	  <td>Custom UDP Rule</td><td>ALL</td><td>ID of this security group</td>
    	</tr>
    </table>

1. Click **Save**.

    **Note**: Ensure that the **Save Successfully** message displays. You may
    have to refresh the page to view the updated inbound rules.

## <a id="create-manifest"></a>Step 3: Download BOSH stemcell ##

If you haven't already, install the [BOSH Command Line Interface (CLI)](./bosh-cli.html).

1. In a terminal window, run `bosh public stemcells` from your deployment
directory to see a list of publicly available BOSH stemcells. It will display the most
recent build of each flavor.

    <pre class='terminal'>
    $ bosh public stemcells
    +-------------------------------------------------------------+
    | Name                                                        |
    +-------------------------------------------------------------+
    | bosh-stemcell-2717-aws-xen-ubuntu-trusty-go_agent.tgz       |
    | bosh-stemcell-2717-aws-xen-centos-go_agent.tgz              |
    | light-bosh-stemcell-2717-aws-xen-ubuntu-trusty-go_agent.tgz |
    | light-bosh-stemcell-2717-aws-xen-centos-go_agent.tgz        |
                    ... older stemcells ...
</pre>

1. BOSH stemcell names include the type, BOSH build number, target IaaS and hypervisior, 
and underlying operating system. To download a stemcell run `bosh download public stemcell STEMCELL-NAME`.

    To download the latest light Ubuntu Trusty stemcell:

    <pre class='terminal'>
    $ bosh download public stemcell light-bosh-stemcell-2717-aws-xen-ubuntu-trusty-go_agent.tgz
    </pre>

## <a id="deploy"></a>Step 4: Deploy MicroBOSH ##

1. In a terminal window, run `bosh micro deployment microbosh.yml` from your
deployment directory to instruct MicroBOSH to use your manifest file.

    <pre class='terminal'>
    $ cd ~/my-micro-deployment
    $ bosh micro deployment manifest.yml
    WARNING! Your target has been changed to https://54.86.66.111:25555!
    Deployment set to ~/my-micro-deployment/manifest.yml
    </pre>

    **Note**: The `WARNING!` message alerts you to a change in the targeted
	  IP address, and is not an error message, despite being incredibly confusingly
    highlighted in red and for all appearances informing you that something bad has happened.

1. Use `bosh micro deploy light-bosh-stemcell-2717-aws-xen-ubuntu-trusty-go_agent.tgz` to deploy MicroBOSH.

    **Note**: A red `No bosh-deployments.yml file found` warning is expected.
    If prompted to allow MicroBOSH to "save state" in the current directory,
    type **yes**.

    <pre class='terminal'>
    $ bosh micro deploy light-bosh-stemcell-2717-aws-xen-ubuntu-trusty-go_agent.tgz

    No 'bosh-deployments.yml' file found in current directory.

    Is ~/my-micro-deployment a directory where you can save state? (type 'yes' to continue): yes

    Deploying new micro BOSH instance ~/my-micro-deployment/manifest.yml to 'https://54.86.66.111:25555' (type 'yes' to continue): yes

      Started deploy micro bosh
      ...
      Done deploy micro bosh

    Deployed '~/my-micro-deployment/manifest.yml' to 'https://54.86.66.111:25555', took 00:04:51 to complete
    </pre>

1. Use `bosh target ELASTIC-IP-ADDRESS` to log into your new BOSH Director.
The default username and password are `admin` and `admin`.

    <pre class="terminal">
    $ bosh target 54.86.66.111
    Target set to 'microbosh'
    Your username: admin
    Enter password: *****
    Logged in as 'admin'

    $ bosh vms
    No deployments
    </pre>

## <a id="troubleshooting"></a>Basic Troubleshooting ##

If the deployment fails, run `bosh micro delete`, then deploy again.

If you see an error message that refers to your `access key signature`, check
the accuracy of the ACCESS-KEY-ID and SECRET-ACCESS-KEY in the deployment
manifest.

If you see other error messages:

* Check your `microbosh.yml` for errors.
* Review your AWS configuration.
