---
title: BOSH Jobs and Errands
---

A BOSH job is a blueprint that describes:

* A set of processes
* Rules for deploying and running the processes
* Resources that the processes need

The creator of a BOSH deployment organizes the processes that need to run in the
deployment into logical groups.
Each group provides a discrete function for the deployment.
BOSH calls these groups **jobs**.
BOSH jobs are the fundamental building blocks of a BOSH deployment.

Using a job as a blueprint, BOSH creates configuration files and software to run
on a VM.
BOSH calls these files and software an **instance** of the job.

There is a one-to-many-to-many mapping between jobs, instances of jobs, and VMs.
Specifically:

* BOSH can create multiple instances from the same job.
* Multiple VMs can each run an instance of the same job.
* Instances created from different jobs can run on the same VM.

For example, four VMs could each run an instance of the Cloud Controller job,
with one VM running both a Cloud Controller job instance and an instance of the
DEA job.

## <a id="jobs-vs-errands"></a>Jobs vs. Errands ##

In most cases, a developer wants a job instance to run as long as the deployment
runs.
For example, if a job instance runs a database for a deployment, the developer
would want the database to be available for the life of the deployment.
BOSH runs these jobs using [`monit`](#monitoring).

In other cases, a developer might want a job instance to run once, or only on
demand.
BOSH calls these kinds of jobs **errands**.
A BOSH errand is a BOSH job that an operator can run once, or multiple times,
after a deploy finishes.
The operator runs BOSH errands using the `bosh run errand` command.
BOSH errands stop after the task they describe completes.

To distinguish an errand from a non-errand job, set the `lifecycle` property for 
the errand in the [Jobs Block](./deployment-manifest.html#jobs) of the 
deployment manifest to `errand`.
If this property is not set, BOSH uses the default value `service` and
configures instances of the job to run as long as the deployment runs.

Common BOSH errands include any task meant to be run once or only on demand.
Examples include:

* Smoke tests
* Binding or unbinding a Cloud Foundry service broker
* Pushing an application to Cloud Foundry

## <a id="job-parts"></a>Parts of a BOSH Job ##

Jobs are defined in a BOSH [release](./create-release.html).
BOSH jobs consist of three parts: specifications, templates, and monitoring.

### <a id="specification"></a>Specification ###

A job specification, or **spec**, is a YAML document that lists:

* Required [packages](./reference/packages.html): A package contains source code and a script. The script describes how to compile the source code and install the resultant binary. Optionally, packages can contain the names of other packages this package depends on.
* Job templates: The names and file paths to [job templates](#template) the job uses.
* Job properties: BOSH uses job properties when creating an instance of a job. Typical job properties include account names, passwords, shared secrets, hostnames, IP addresses, port numbers, and descriptions.

### <a id="templates"></a>Templates ###

At compile time, BOSH uses job templates to create the control scripts and
configuration files that the BOSH [agent](./terminology.html#agent) needs to run
the processes in a job instance.

Templates contain information common to all job instances created using the
template, and consist of plain text and Ruby code for variable substitution and
flow control.
BOSH evaluates these templates as Ruby [ERB template](http://www.stuartellis.eu/articles/erb/) files when creating an
instance of a job.

### <a id="monitoring"></a>Monitoring ###

#### <a id="job-monitoring"></a>Non-errand jobs ####

If a job is not defined as an errand, BOSH uses
[monit](http://mmonit.com/monit/) to manage and monitor the health of processes
in an instance of the job.
Using monit, BOSH can start, stop, and restart instances of a job when
necessary.

At a minimum, a `monit` file contains three parts for each process in a job:

* `with pidfile`: Name and path to the file containing the process ID (PID)
* `start program`: Command monit uses to start the process
* `stop program`: Command monit uses to stop the process

#### <a id="errand-monitoring"></a>Errands ####

BOSH errands run once, or only on demand, and stop after the task they describe
completes.
BOSH does not monitor the health of any processes in an instance of an errand.

Instead of using the `start program` command in a monit file, an operator runs
BOSH errands using the `bosh run errand` command.
Therefore, an errand defined in a BOSH release should provide an executable
`run` script.

## <a id="running"></a>Running Jobs ##

BOSH ensures an instance of a job always runs in a predictable, deterministic
environment by creating a new VM specifically for the instance.

### <a id="job-running"></a>Non-errand jobs ###

If a job is not defined as an errand, BOSH creates instances of the job on VMs
as part of the deployment process.
BOSH monitors the instances and restarts any that fail, keeping them running for
as long as the deployment runs.

BOSH runs non-errand jobs using the commands provided in the `monit` file.

Example `monit` file:

<pre class="terminal">
check process postgres
  with pidfile /var/vcap/sys/run/postgres/postgres.pid
  start program "/var/vcap/jobs/postgres/bin/postgres_ctl start"
  stop program "/var/vcap/jobs/postgres/bin/postgres_ctl stop"
</pre>

### <a id="errand-running"></a>Errands ###

Whenever an errand runs, BOSH:

1. Initiates a **deployment lock** that prevents any other deploys
1. Provisions and configures the VM for the errand
1. Installs the errand code and all required packages and templates
1. Runs the processes specified by the errand
1. Sends all output of the errand to the BOSH CLI for output to the screen
1. Releases the deployment lock
1. Release the VM back into the resource pool

**Note**: Since BOSH requests and provisions a new VM for each errand, the
resource pool for a BOSH deployment with errands must include one additional VM
per errand.

To run an errand, use `bosh run errand ERRAND-NAME`. ERRAND-NAME must be an
errand job name provided in the deployment manifest.

Example:

<pre class="terminal">
$ bosh run errand my-smoke-test-errand
</pre>

The `bosh run errand` command compiles all packages the errand job requires and executes the `run` script that the BOSH release provides for the errand.

#### <a id="run-script"></a>Example Executable Script ####

This is an example `run` script for a BOSH errand that de-registers a service
broker.

<pre class='terminal'>
#!/bin/bash
set -e
export PATH=$PATH:/var/vcap/packages/ruby/bin
cd /var/vcap/packages/broker-registrar

CF_API_URL='&lt;%= p("cf.api_url") %&gt;'
CF_ADMIN_USERNAME='&lt;%= p("cf.admin_username") %&gt;'
CF_ADMIN_PASSWORD='&lt;%= p("cf.admin_password") %&gt;'
BROKER_NAME='&lt;%= p("broker.name") %&gt;'
BROKER_URL='http://&lt;%= p("broker.host") %&gt;:&lt;%= p("broker.port") %&gt;'
BROKER_USERNAME='&lt;%= p("broker.username") %&gt;'
BROKER_PASSWORD='&lt;%= p("broker.password") %&gt;'

# partially-redacted command for debugging
echo "
bundle exec ./bin/broker-registrar delete
    --cf-address $CF_API_URL
    --cf-username $CF_ADMIN_USERNAME
    --cf-password ********
    --broker-name $BROKER_NAME
    --broker-url $BROKER_URL
    --broker-username $BROKER_USERNAME
    --broker-password ********
"

bundle exec ./bin/broker-registrar delete \
    --cf-address $CF_API_URL                \
    --cf-username $CF_ADMIN_USERNAME        \
    --cf-password $CF_ADMIN_PASSWORD        \
    --broker-name $BROKER_NAME              \
    --broker-url $BROKER_URL                \
    --broker-username $BROKER_USERNAME      \
    --broker-password $BROKER_PASSWORD
</pre>

## <a id="canceling-jobs"></a>Canceling Jobs ##

You cannot cancel non-errand jobs.

Use `bosh cancel errand ERRAND_NAME` to cancel a running errand.

Example:

<pre class="terminal">
$ bosh cancel errand my-smoke-test
</pre>

The `bosh cancel errand` command terminates the errand process, releases the
deployment lock, and returns the errand VM to the resource pool.

## <a id="errand-running"></a>Warnings and Important Tips ##

* Errands do not have a notion of persistence. Persistent disk migration for errands is not supported.
* Whenever an errand runs, BOSH initiates a deployment lock. This lock prevent all other deploys. Additionally, the `cloud check` CLI command is unavailable and the health monitor does not scan and fix current deployments during the duration of the errand.
* Currently, BOSH limits errand output to 1 MB. BOSH discards errand output greater than 1 MB.