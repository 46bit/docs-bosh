---
title: Deploying Distributed Software with BOSH
---

This topic is geared towards the reader who has set up an IaaS instance for BOSH,
deployed MicroBOSH, and is now ready to deploy multi-VM BOSH.
The assumed goal is to use multi-VM BOSH as the primary toolset for deploying
other distributed software and for managing the lifecycle of that software.

This is a tutorial in _using MicroBOSH to deploy multi-VM BOSH_.
It belongs the larger category of stories about
_using BOSH to deploy distributed software_.
That category includes many possibilities.
For example:

* Using multi-VM BOSH to deploy a BOSH release of a key-value store.
* Using MicroBOSH to deploy a distributed messaging service.
* Using multi-VM BOSH to deploy Cloud Foundry.

When you work through this tutorial, you experience what the BOSH development
team thinks of as the canonical example of using BOSH.
Even if you plan to use BOSH in a different way, you will have a useful sense of
how things are supposed to work.

## <a id="prep"></a> Preparing to Deploy ##

### <a id=""></a> Plan how you want to orchestrate your environment ###

In this example, you have decided to deploy BOSH to an environment with two VMs.
You intend to use one VM for the "thinking" parts of BOSH-Director, Health Monitor, Messaging (NATS), and PowerDNS.
and the other for the data-storing parts: Blobstore, Redis, and Postgres.

Putting the data on its own VM might be something you do for the sake of a security architecture.

### <a id=""></a> Set up the IaaS ###

You collect all the information about your vSphere and vCenter that you need to configure the environment you plan to deploy.

This includes:

* The names for your datacenter, datastore, cluster, resource pool, and network.
* The IP addresses for your vCenter and network gateway.
* The IP addresses for the VMs to be deployed, called static IP addresses
* The range of IP addresses of your network.
* The range of IP addresses that you want to reserve.
These, and the static IPs, are off-limits to BOSH when BOSH needs to dynamically use an IP address for tasks like compilation.
You always reserve the IP of the Microbosh that is deploying BOSH.

### <a id=""></a> Create the manifest ###

Create the manifest to reflect the desired orchestration of the environment along with the network configuration information
for your IaaS.

### <a id=""></a> Download stemcell and release from public site ###

You download the latest release of BOSH, and a stemcell suitable for your preferred combination of IaaS and VM type.
In this example, these are:

* The **bosh-2131** release
* The **vsphere esxi centos** stemcell

**Note**: This is only an example, so you can expect release numbers to be out of date by the time you read this.

### <a id=""></a> Target and log into MicroBOSH ###

Use the `bosh target` command so that the BOSH CLI runs on the MicroBOSH you want to use to deploy software.
Then log in on the MicroBOSH, and run the `bosh vms` command if you want to

<pre class="terminal">
$ bosh target 172.16.99.11
Target set to `embarcadero-microbosh'

 |1.9.3-p484| embarcadero in ~/bosh
$ bosh login admin ********
Logged in as `admin'

 |1.9.3-p484| embarcadero in ~/bosh
$ bosh vms
No deployments
</pre>

## <a id="deploying"></a> Deploying ##



### <a id="stemcell"></a> Upload the Stemcell ###

<pre class="terminal">
$ bosh upload stemcell ~/Downloads/bosh-stemcell-2089-vsphere-esxi-centos.tgz

Verifying stemcell...
File exists and readable                                     OK
Verifying tarball...

...

Uploading stemcell...

bosh-stemcell: 100% |oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo| 558.9MB  39.4MB/s Time: 00:00:14
</pre>

Run the `bosh stemcells` command to verify that the stemcell you had before is no longer present on your local system,
because it has been uploaded to MicroBOSH:

<pre class="terminal">
$ bosh stemcells
No stemcells
</pre>


### <a id="release"></a> Upload the Release ###

<pre class="terminal">
$ bosh upload release ~/Downloads/bosh-2131.tgz

Verifying release...
File exists and readable                                     OK
Extract tarball                                              OK
Manifest exists                                              OK
Release name/version                                         OK

....

Release has been created
  bosh/42 (00:00:00)
Done                    1/1 00:00:00

Task 18 done

Started		2014-03-07 06:16:09 UTC
Finished	2014-03-07 06:16:10 UTC
Duration	00:00:01

Release uploaded
</pre>

### <a id="manifest"></a> Set Deployment with a Manifest ###

<pre class="terminal">
$ bosh deployment ~/workspace/deployments-vcenter/embarcadero/bosh2/manifest.yml
Deployment set to `/Users/pivotal/workspace/deployments-vcenter/embarcadero/bosh2/manifest.yml'
</pre>

### <a id="deploy"></a> Deploy ###

<pre class="terminal">
$ bosh deploy
Getting deployment properties from director...
Compiling deployment manifest...
Please review all changes carefully
Deploying `manifest.yml' to `embarcadero-microbosh' (type 'yes' to continue): yes

...

Started		2014-03-07 06:38:12 UTC
Finished	2014-03-07 06:39:52 UTC
Duration	00:01:40

Deployed `manifest.yml' to `embarcadero-microbosh'
</pre>

### <a id="afterword"></a> Verify ###

<pre class="terminal">
$ bosh target 172.16.99.212
Target set to `bosh2'
Your username: admin
Enter password: *****
Logged in as `admin'
</pre>



