---
title: MicroBOSH Deployment Manifest Example for OpenStack
---

Create a `micro_bosh.yml` file and copy the below content:

~~~yaml
---
name: microbosh-openstack

logging:
  level: DEBUG

network:
  type: manual
  vip: <allocated_floating_ip> # Optional
  ip: <static_ip>
  cloud_properties:
    net_id: <network_uuid>

resources:
  persistent_disk: 16384
  cloud_properties:
    instance_type: <flavor_name>

cloud:
  plugin: openstack
  properties:
    openstack:
      auth_url: http://<identity_server>:5000/v2.0
      username: <username>
      api_key: <password>
      tenant: <tenant>
      region: <region> # Optional
      default_security_groups: ["ssh", "bosh"]
      default_key_name: <microbosh_keypair>
      private_key: <path_to_microbosh_keypar_private_key>

apply_spec:
  properties:
    director:
      max_threads: 3
    hm:
      resurrector_enabled: true
    ntp:
      - 0.north-america.pool.ntp.org
      - 1.north-america.pool.ntp.org
~~~

Adapt the `micro_bosh.yml` file to your environment settings:

#### <a id="network_properties"></a>Network properties ####

This section sets the network configuration for your Micro BOSH.

If you are using nova-network, adapt the network section with below settings:

~~~yaml
network:
  type: dynamic
  vip: <allocated_floating_ip> # Optional
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.

If you are using the new [OpenStack Networking](http://www.openstack.org/software/openstack-networking/) component, adapt the network section with below settings:

1. If your network has DHCP enabled, you can let OpenStack pick an IP address:

~~~yaml
network:
  type: dynamic
  vip: <allocated_floating_ip> # Optional
  cloud_properties:
    net_id: <network_uuid>
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.
* The `net_id` option sets the OpenStack network to use. `network_uuid` **must** be an existing Network UUID (you can list your OpenStack networks using the command `quantum net-list`).

1. If you want to set the Micro Bosh IP address manually:

~~~yaml
network:
  type: manual
  vip: <allocated_floating_ip> # Optional
  ip: <static_ip>
  cloud_properties:
    net_id: <network_uuid>
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.
* The `ip` option sets the IP address to assign to the Micro BOSH vm. `static_ip` **must** be an IP address belonging to the IP range of one of the network subnets set in `net_id`.
* The `net_id` option sets the OpenStack network to use. `network_uuid` **must** be an existing Network UUID (you can list your OpenStack networks using the command `quantum net-list`).

#### <a id="resources_properties"></a>Resources properties ####

This section sets the resources configuration for your Micro Bosh.

~~~yaml
resources:
  persistent_disk: 16384
  cloud_properties:
    instance_type: <flavor_name>
~~~

* The `persistent_disk` indicates that a new 16Gb volume will be created and attached to the Micro BOSH vm. On this disk, Micro BOSH will store the data, so in case you reboot or when upgrading the Micro BOSH vm, no data will be lost.
* The `instance_type` set the OpenStack flavor used for the Micro BOSH vm. The `flavor_name` **must** have ephemeral disk (check the [validate your OpenStack](validate_openstack.html) guide)

#### <a id="cloud_properties"></a>Cloud properties ####

This section sets the cloud configuration for your Micro BOSH.

~~~yaml
cloud:
  plugin: openstack
  properties:
    openstack:
      auth_url: http://<identity_server>:5000/v2.0
      username: <username>
      api_key: <password>
      tenant: <tenant>
      region: <region> # Optional
      default_security_groups: ["default", <microbosh_security_group>]
      default_key_name: <microbosh_keypair>
      private_key: <path_to_microbosh_keypar_private_key>
~~~

* The `auth_url` option set your [OpenStack identity](http://www.openstack.org/software/openstack-shared-services/) server.
* The `username`, `api_key` and `tenant` options sets your OpenStack credentials.
* The `region` option is optional, and allows you to set the OpenStack region to be used.
* The `default_security_groups` option set the security groups used by Micro BOSH. The `microbosh_security_group` **must** be an existing security group (check the [prerequisites](#openstack_security_groups) section).
* The `default_key_name` and `private_key` options sets the key pair used by Micro BOSH. The `microbosh_keypair` **must** be an existing keypair (check the [prerequisites](#openstack_keypairs) section).

#### <a id="apply_spec_properties"></a>Apply Spec properties ####

This section sets the specification configuration for your Micro BOSH.

~~~yaml
apply_spec:
  properties:
    director:
      max_threads: 3
    hm:
      resurrector_enabled: true
    ntp:
      - 0.north-america.pool.ntp.org
      - 1.north-america.pool.ntp.org
~~~

* The `properties` option allows you to add or override the settings to be applied to your Micro BOSH (by default it will use the [micro](https://github.com/cloudfoundry/bosh/blob/master/release/micro/openstack.yml) apply spec).

In this example we add/override several properties:

* `director.max_threads` sets the number of concurrent threads Micro BOSH [director](/bosh/how-bosh-works.html#director) will use to perform some actions (i.e. the number of parallel `create vm` tasks), so set this option according to your OpenStack environment (if not set, the default is 32 concurrent threads).
* `hm.resurrector_enabled` enables the [BOSH Health Monitor](/bosh/how-bosh-works.html#hm) resurrector plugin. This plugin will lookup for jobs in a down state, and will try to resurrect (bring up) them.
* `ntp` sets the [Internet Time Servers](http://www.ntp.org/) to be used to synchronize the clocks of new vms.
