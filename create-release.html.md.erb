---
title: Creating a BOSH Release
---

The workflow for creating BOSH releases is iterative, and looks like this:

  <%= image_tag("release-iterate.png") %>

A more detailed description of the workflow reveals how,
as you iterate, BOSH automatically numbers your releases:

1. Develop or modify the application.
1. Create a **dev release**.
  * BOSH bumps the release number by a "dot."
1. Deploy the **dev release** to your test environment.
1. Test the **dev release**.
Is it ready for final release?
    * If the answer is no, begin the cycle again.
    * If the answer is yes, continue.
1. Create a **final release**.
  * BOSH bumps the release number by whole number.
1. When the final release needs to be modified or improved,
begin the cycle again.

This tutorial walks you through creating and deploying a dev release and then a final release.
You can use the example code to replicate the release we describe in the tutorial.

As a matter of principle, BOSH releases:

* Package up all dependencies.
* Remain buildable for a long time.
* Avoid adding blobs to a git repository.
* Avoid depending on the internet.

As a matter of good practice, when creating BOSH releases, you should:

* Use underscores in filenames.
* Comment your code to facilitate debugging.
* Assume that stemcells contain no libraries or other software that your release can use.

_The finished example release is here <download_link>_.

This tutorial orders tasks in a way that the BOSH Team thinks is efficient,
but that represents just one of many possible ways to accomplish the overall
goal.
These directions are only suggestions unless otherwise noted.

## <a id="what"></a> Decide What to Release ##

A BOSH release contains one or more pieces of software that work together in some way.
For example, you could create a BOSH release of a service with three pieces: two MySQL nodes and a dashboard app.
You may think of these pieces as areas of functionality, or features, or roles.
In a BOSH release, you make each piece a _job_.

Jobs are among the four fundamental elements in a BOSH release.
The others each provide something another element needs:

* **jobs** describe pieces of the service or application you are releasing.
* **packages** provide source code and dependencies to jobs.
* **source** provides packages the non-binary files they need.
* **blobs** provide packages the binaries they need, other than binaries that are checked into a Git repository.

You make several judgment calls when creating a release:
what to include, how to structure it, and how to split up jobs and packages.
To get started creating a release, decide what jobs your release should include.

For the example release, we have decided to include two jobs: a web UI and a background worker.
The worker periodically sends an HTTP request to the web UI, and the web UI displays the number
of worker requests received.

You also decide what properties to give your jobs.
Job properties are essentially inputs.
In our example, we have decided to create one property: the port on which the web UI listens.

In our example, the two jobs split up the functionality provided by single Ruby app, `ardo_app`.

When you deploy a release, BOSH creates two kinds of VMs on the target IaaS:

* **Compilation VMs** provide a temporary, isolated environment where BOSH
prepares the binaries or scripts your jobs need.
That might require compiling source code, running commands which
are equivalent but not the same as compiling (like `bundle install` in Ruby),
 or just copying scripts.
BOSH performs whichever of these three activities a particular release needs,
at "compile time."
The result is the BOSH install target directory, which contains the
binaries or scripts your jobs need.
The install target directory resides on the compilation VM.
BOSH replicates it on the job VM.
Then BOSH deletes the compilation VM.
You decide how many compilation VMs to create, as well as how
compilation VMs should behave, when you create the [deployment manifest](./create-manifest.html#compilation).

* **Job VMs** are the VMs where your deployed jobs run.
Be aware that the release does not specify which groupings of jobs
run on a single VM, or how many instances of that VM to create.
You make those decisions when you create the [deployment manifest](./create-manifest.html#release).

By compiling your code in the isolated environment of a
compilation VM which is identical to the job VM, BOSH frees you from concerns
 about discrepancies between compilation environment and deployment environment.
Because both VMs are newly-created, you can be certain that they are in
a known state, in the sense that they can never contain software
left over from previous deployments.

## <a id="release-dir"></a> Create the Release Directory ##

All the constituent parts of a release reside in the _release directory_.

`cd` into the workspace where you want the release to be, and create the release directory:

  `bosh init release <release_name> --git`

The `--git` option initializes a git repo in the release directory.
This is recommended but not required.

Our example release is named `ardo-release`.
The name "ardo" was chosen arbitrarily, but the dash was not.
The release name should have dashes rather than underscores, to conform to the
convention for Git repo names.
All other filenames in the release should use underscores.

`cd` into the release directory.
This is where all the BOSH commands in this tutorial are run from here on.

View the release with `tree`:

<pre class="terminal">
$ tree .
.
├── blobs
├── config
│   └── blobs.yml
├── jobs
├── packages
└── src

5 directories, 1 file
</pre>

Notice that in the release directory, BOSH creates a subdirectory for each
of the fundamental elements: jobs, packages, source (which BOSH calls `src`), and blobs.

### <a id="source"></a> Populate the src directory ###

Populate the `src` directory with your source code.

You can just copy the `ardo_app` directory into `src`.
That keeps the tutorial simple.
For production, consider using a Git [submodule](https://git.wiki.kernel.org/index.php/GitSubmoduleTutorial).
With a Git submodule, users of your release always access the correct
versions of dependencies even when those versions are no longer current.

### <a id="strategy"></a> A note about work strategy ###

You are about to begin five central parts of the tutorial,
Create Job Skeletons, Make Dependency Graphs, Create Packages, Add Blobs Locally,
and Update Specs to Complete Jobs.
You can proceed in either of two ways:

1. **One section at a time**. Complete one section for all jobs, then do the same for in the next section, and so on.

1. **One job at a time**. Complete all four sections for one job, do the same for the next job, and so on.

For releases with just a few jobs, going one section at a time is probably easiest.
We'll do that in this tutorial.
If you have a larger number of jobs, going one job at a time may be more efficient.
Choose the approach that seems most comfortable and least error-prone.

## <a id="job-skel"></a> Create Job Skeletons ##

When first created, the job is a _skeleton_: an empty structure that fills up
as release creation progresses.

Generate job skeletons by running this command once for each job in your release:

  `bosh generate job <job_name>`

In our example, we run `bosh generate job` twice, once for the `web_ui` job,
and once for the `bg_worker` job.

View the job skeletons with `tree`:

<pre class="terminal">
$ tree .
.
├── blobs
├── config
│   └── blobs.yml
├── jobs
│   ├── bg_worker
│   │   ├── monit
│   │   ├── spec
│   │   └── templates
│   └── web_ui
│       ├── monit
│       ├── spec
│       └── templates
├── packages
└── src

9 directories, 5 files
</pre>

Every deployed job needs a way to start and stop.
You provide that in the BOSH release by writing a control script for each job,
and a `monit` file that references the commands in the control script.

### <a id="control"></a> Create control scripts  ###

The control script:

* Includes a start command and a stop command.
* Is an ERb template stored in the `templates` directory for the relevant job.

At compile time, BOSH transforms templates into files, which it then replicates
on the job VMs.
For each job in our example, the `ctl.erb` template becomes the `bin/ctl` file.

The control script for the `web_ui` job looks like this:

_insert snippet_
_Can we comment the script as an example of the right way to do this?_

For each job, create a control script and save it as `ctl.erb` in the `templates`
directory for its job.

Start and stop commands in production situations typically turn more things on
and off than the simple ones in our example do.
Control scripts can be the source of unexpected behavior that you discover as
you test your dev releases.
When that happens, you refine your scripts and iterate.
For these reasons, writing control scripts is typically one of the heavier
tasks entailed in creating a release.

If your release needs templates other than the control script, create them now.

### <a id="monit"></a> Update monit files  ###

The `monit` file:

* Specifies the process ID (pid) file for the job.
* References each command provided by the templates for the job.
* Specifies that the job belongs to the `vcap` group.

On a deployed release, a BOSH Agent runs on each job VM.
BOSH communicates with the Agent, which in turn executes the commands you have
provided in the control script.
The Agent does this with the help of [Monit](http://mmonit.com/monit/),
which is open source software for monitoring processes, programs, files, and
directories.

The `monit` file for the `web_ui` job looks like this:

_insert snippet_

Update the `monit` file for each of your jobs, adapting the example.

### <a id="job-specs"></a> Update job specs  ###

Metadata for each job resides in a `spec` file.
The `spec` file has a `templates` block which you must update as described
in this section.

BOSH makes templates into files on VMs at compile time.

In the `templates` block of the `spec` file for each job:

* Each template name is a key.
* Each path to the corresponding file on a job VM is a value.

The file paths that you provide for templates are relative to
a sort of home directory that BOSH creates for the job on the VM:

~~~
/var/vcap/jobs/<job_name>/
~~~

In our example, we edit the `spec` files for the both the `web_ui` and `bg_worker` jobs.
The updated `spec` file for the `bg_worker` job looks like this:

~~~yaml

templates:
  ctl.erb: bin/ctl

~~~

The path we provided for the `bg_worker` control script is
`bin/ctl`.
We know that BOSH will translate that into the full path `/var/vcap/jobs/bg_worker/bin/ctl`.

Update the `spec` files for all the jobs in your release with the template names.

### <a id="commit-one"></a> Commit ###

You have now created one or more job skeletons; this is a good time to commit.

If you used the `--git` option with `bosh init release` (as recommended), the
correct `.gitignore` file has been automatically created for you.

## <a id="graph"></a> Make Dependency Graphs ##

There are two kinds of dependencies in a BOSH release:

* The **runtime dependency**, where a job depends on a package at runtime.
For example, the `web_ui` job depends on Ruby.
* The **compile-time dependency**, where a package depends on another package at compile time.
For example, Ruby depends on the YAML library.

Three rules govern these dependencies:

* Jobs never depend on other jobs.
* Jobs can depend on packages.
* Packages can depend on other packages.

Correctly understanding the dependencies between the jobs and packages in your release is essential.
Creating a dependency graph helps you clarify this understanding, and provides a
reference as you add elements to the release.

Identify runtime dependencies by going through your control scripts (and other templates, if any).
Note the package names cited by each script.

In our example, this line in either of our `ctl.erb` scripts cites `ardo_app`:

~~~
cd /var/vcap/packages/ardo_app
~~~

This line cites Ruby:

~~~
exec /var/vcap/packages/ruby_1.9.3/bin/bundle exec
~~~

Add these dependencies to your dependency graph.
They are runtime dependencies, because they are cases where jobs depend upon
packages.

Identify compile-time dependencies by using your knowledge about the
dependencies you have already noted.
If you happen to miss a dependency, BOSH will let you know later, when you
try to run `bosh deploy`.

In our example, we have noted a runtime dependency on Ruby 1.9.3.
We now ask ourselves whether Ruby 1.9.3 itself has any dependencies.
The answer is yes, it depends on libyaml 0.1.4.

Add this dependency to your dependency graph.
This is a compile-time dependency because it is a case where a package
depends upon another package.

Throughout this process, you note dependencies that tell you which actual
packages you will add to your release later on.
For now, you have a dependency graph to guide you as you continue creating
your release.

The complete dependency graph for `ardo-release` looks like this:

  <%= image_tag("dep-graph.png") %>

For a large or complicated release, you might prefer to make more than one
dependency graph.

## <a id="..."></a> Create Package Skeletons ##

Packages give BOSH the information it needs to prepare the binaries
and dependencies that your jobs need to run.

When first created, a package is a _skeleton_: an empty structure that fills up
as release creation progresses.

Create packages starting from the bottom of your dependency graph.

  `bosh generate package <dependency_name>`

In our example, we run this command three times.
Starting from the bottom of the dependency graph,
we run it for `libyaml_0.1.4`, `ruby_1.9.3`, and `ardo_app`.

View the package skeletons with `tree`:

<pre class="terminal">
$ tree packages
packages
├── ardo_app
│   ├── packaging
│   ├── pre_packaging
│   └── spec
├── libyaml_0.1.4
│   ├── packaging
│   ├── pre_packaging
│   └── spec
└── ruby_1.9.3
    ├── packaging
    ├── pre_packaging
    └── spec

3 directories, 9 files
</pre>

This modular approach, with a separate package for each dependency, is
provides maximum reusability along with clear structure.
It is not mandatory; what packages to create is a matter of preference.
You could even opt to put all the dependencies together in a single package,
though that is not recommended.

**Note**: Use of the `pre_packaging` file is not recommended, and is not discussed in this tutorial.

### <a id="update-pkging-specs"></a> Update packaging specs ###

Within each package directory is a `spec` file which states:

* The package name.
* The package's dependencies.
* The location where BOSH can find the binaries and other files that the package needs during compilation.

Use your dependency graph to determine which dependencies belong in each spec.
Your personal preferences and style as a developer also play a role here.
Consider our example: the spec for Ruby lists `rubygems` and `bundler` as dependencies along
with Ruby itself.
Some Ruby developers would do it this way; others would not.

Remember not to depend on the presence of libraries or other software on the stemcells that
BOSH uses to create VMs.
This maximizes the portability of your release across different versions of stemcells.

To correctly describe binary locations in the `files` block of the spec:

* Find the official site for the binary in question.
For example, Ruby might be at `http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p484.tar.gz`.

* Download the binary from the official location and make sure the file hash matches.

* Record the binary name including version number, with a slash and the binary
filename concatenated to it.
It's a good idea to cite the official URL in a comment, in the same line.

BOSH interprets the locations you record in the `files` section as being
either in the `src` directory or in the `blobs` directory.
(BOSH looks in `src` first).
When you add the actual blobs to a blobstore (see the next section),
BOSH populates the `blobs` directory with the correct information.

Observe how these conventions are followed in the examples.

_add examples inline_

Update the spec for each package.

### <a id="..."></a> Create packaging scripts ###

At compile time, BOSH takes the source files referenced in the package specs,
 and renders them into the executable binaries and scripts that your jobs will
need once deployed.

You write packaging scripts to instruct BOSH how to do this.
The instructions may involve some combination of copying, compilation, and
related procedures.
For example:

* For a Ruby app like `ardo_app`, BOSH must copy source files and install Ruby
gems.

* For Ruby itself, BOSH must compile source code into a binary.

* For a Python app, BOSH must copy source files and install Python eggs.

BOSH relies on you to write packaging scripts that perform the correct operation.

Adhere to these principles when writing packaging scripts:

* Use your dependency graph to determine which dependencies belong in each
packaging script.

* Begin each script with a `set -e -x` line.
This aids debugging at compile time by causing the script to exit immediately
if an error occurs.

* Ensure that any copying, installing or compiling delivers resulting code to
 the install target directory (represented as the `BOSH_INSTALL_TARGET`
environment variable). For `make` commands, use `configure` or its equivalent
to accomplish this.

* Be aware that BOSH ensures that dependencies cited in the `dependencies`
block of package `spec` files are available to the deployed binary.
For example, in the `spec` file for the Ruby package, we cite libyaml as a dependency.
That ensures that the Ruby on deployed VMs has access to libyaml.

If the instructions you provide in the packaging scripts fail to deliver compiled
code to `BOSH_INSTALL_TARGET`, the job cannot function because the VM has no
way to find and run the code.
This failure scenario can happen if, for example,
you use a `make` command that delivers compiled code to some standard location
by default.
You can fix the problem by configuring `make` to compile into
`BOSH_INSTALL_TARGET`.
See how this is done in the example packaging scripts.

Write your packaging scripts now.
To get started, study the examples.

_snippet_

Like control scripts, writing packaging scripts is one of the heavier tasks
entailed in creating a release.

### <a id="update-job-specs-with-deps"></a> Update job specs with dependencies ###

The dependency graph reveals runtime dependencies that
need to be added to the `packages` block of the job spec.

Edit the job specs to include these dependencies.

In our example, the dependency graph shows that `web_ui` job depends on
`ardo_app` and `ruby_1.9.3`:

~~~yaml
packages:
- ardo_app
- ruby_1.9.3
~~~

_Explain files block_
_glob for ardo_app_

## <a id="blobs"></a> Add Blobs ##

When creating a release, you use Git for your source code.
For example, the `ardo_app` source is checked into a Git repo.

But releases often also use tar files or other binaries, also known as blobs.
For example, `ardo-release` uses libyaml.
Checking blobs into Git would be problematic because Git is not
well-suited to dealing with large binaries.

BOSH lets you avoid checking blobs into Git by doing the following:

* For dev releases, use local copies of blobs.

* For a final release, upload blobs to a blobstore,
and direct BOSH to obtain the blobs from there.

### <a id="config-blobstore"></a> Configure a blobstore  ###

Although the blobstore is not needed until you do a final release,
configuring the blobstore ahead of time makes for a better workflow.

In the `config` directory, you record the information BOSH needs about the
blobstore:

* The `final.yml` file names the blobstore and declares its type, which is either `local`
or one of several other types that specify blobstore providers.

* The `private.yml` file specifies the blobstore path, along with a secret.

`private.yml` contains keys for accessing the blobstore.
For that reason, `private.yml` is automatically gitignored (assuming you used the `--git`
option when running `git init release` at the beginning of this tutorial).
By not checking `private.yml` into Git, BOSH keeps the keys private.

The `config` directory also contains two files whose content is automatically
generated: the `blobs.yml` file and the `dev.yml` file.

Adapt the examples below to fit the specifics of your release.

Example `final.yml`:

~~~yaml
---
blobstore:
  provider: local
final_name: ardo_blobstore
~~~

Example `private.yml`:

~~~yaml
---
blobstore_secret: 'does-not-matter'
blobstore:
  local:
    blobstore_path: /tmp/ardo-blobs

~~~

**Note**: The `blobstore_secret` is required for the `local` type blobstore.
This is true even though the `blobstore_secret` line is deprecated and its
content does not matter.
There is never `blobstore_secret` line for blobstores of types other than
`local`.

Also, be aware that the `local` type blobstore is essentially a convenience for
development.
Final releases should use a publically-accessible type of blobstore.

### <a id="inform"></a> Inform BOSH where blobs are ###

Each package has a `spec` file, which has a `files` block.
For packages whose content you downloaded from the internet,
the `files` block lists the binaries you downloaded, along with
the URLs from which you downloaded them.
(This assumes that you followed the directions in the [Update package specs](#update-pkging-specs) section.)

Those files are blobs, and now you need the paths to the downloaded blobs on
your local system.

In our example, the `spec` file for the `libyaml_0.1.4` package includes the line:

~~~yaml
files:
- libyaml_0.1.4/yaml-0.1.4.tar.gz # From http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
~~~

If you downloaded the blob, its local path might be:

`~/Downloads/yaml-0.1.4.tar.gz`

Go through all your packages and make a list of local paths to the blobs you downloaded.
Now you are ready to inform BOSH about these blobs.

For each blob, run:

`bosh add blob <path_to_blob_on_local_system> <package_name>`

BOSH adds each blob to the `blobs` directory, in a subdirectory whose name is the
second argument to the `bosh add blob` command.
The package name is a good choice for that argument because it produces a
cleanly-organized `blobs` directory.

### <a id="no-upload"></a> Do not upload blobs for a dev release ###

The nature of blobstores (other than local ones) is that once you have uploaded blobs,
those blobs may become essential to some other developer.
For this reason, uploading a blob and then removing it is considered poor practice.

When creating dev releases, do not run `bosh upload blobs`.
That command is discussed below, in connection with final releases.

## <a id="..."></a> Update Specs to Complete Jobs ##

_what have we not done yet?_

## <a id="create-props"></a> Create Job Properties  ##

You can specify what in your service is configurable at deployment time.
Each configurable input or control is a _property_ that belongs to a
particular job.

Creating properties requires three steps:

1. Define properties in the `properties` block of the job spec.

1. Add a variable for the property to relevant templates.
For example, a start command can take a property as an argument,
using a variable of the form:

1. Specify the property in the deployment manifest.

In our example, we want the port that the web UI listens on to be a
configurable property.

We edit the spec for the web UI job.

## <a id="dev-release"></a> Do a Dev Release  ##

We have:

* blobs
* source
* script to build from source
* control script


### <a id="dev-release-release"></a> Release  ###

Can't create release before uploading blobs unless we use the `--force`
option, which tells BOSH to use the blobs in the local blobstore.
This is permissible when creating and testing dev releases but not
final releases.

`bosh create release --force`

BOSH asks for release name.
For a dev release, this can be anything.

### <a id="dev-release-deploy"></a> Deploy the Dev Release  ###

Target a director.

See what releases are available:

  `bosh releases`

If BOSH is already pointing to a release, edit the BOSH deployment manifest.
Otherwise, [create a manifest] (./create-manifest.html).

Upload the new dev release.

   `bosh upload release`


Assuming you are in the release directory, no path is needed with the above command.

Deploy:

   `bosh deploy`

See [Deploying Distributed Software with BOSH](./deploy-with-bosh.html) for more about deployment.

### <a id="dev-release-test"></a> Test the Dev Release  ###

What tests to run depends on the software you are releasing.

* Debug primer: log in on VM, etc.

If your release fails any of these tests:

* Fix
* Do a new dev release and then bosh deploy to see that new release succeeds deploying.
* You can use `bosh deploy --recreate` to deploy all VMs from scratch.

## <a id="final-release"></a> Do a Final Release  ##

Only proceed to this step if your latest dev release passes all tests.

### <a id="upload-blobs"></a> Upload blobs ###

You are ready to do a final release except for one thing:
your latest dev release depends on locally-stored blobs.

Before you go further, run `bosh blobs`.
Proofread the list of blobs to make sure
it includes nothing but the blobs you need for the final release.

If some file that you need to keep private is mistakenly
uploaded to a blobstore, there is no satisfactory way to
undo the error.

Now you can upload your blobs to a blobstore:

`bosh upload blobs`

### <a id="final-commit"></a> Commit ###

You have run the `bosh upload blobs` command so the `blobs` file now contains names and keys.

This is a good time to commit.

### <a id="final-release-release"></a> Release ###

Run:

`bosh release --final`

BOSH prompts you for a release name, and assigns a whole-number version to the release.

This is a good time to `git push` so that other team members have access to final release you just created.


### <a id="final-release-commit"></a> Commit ###

One more commit before you deploy.

### <a id="final-release-deploy"></a> Deploy the Final Release  ###

Run:

`bosh deploy`

