---
title: Creating a BOSH Release
---

Suppose you want to create a BOSH release of an application that you have developed.

You can do this using an iterative workflow:

1. Develop the application.
1. Create a **dev release**.
  * BOSH bumps the release number by a "dot."
1. Deploy the **dev release** to your test environment.
1. Test the **dev release**.
Is it ready for final release?
    * If the answer is no, begin the cycle again.
    * If the answer is yes, continue.
1. Create a **final release**.
  * BOSH bumps the release number by whole number.

As a matter of principle, BOSH releases:

* Package up all dependencies.
* Do not add blobs to a git repository.
* Remain buildable for a long time.
* Do not necessarily depend on the internet.

As a matter of good practice, when creating BOSH releases, you should:

* Use underscores in filenames.
* Comment your code to facilitate debugging.
* Assume that stemcells contain no libraries or other software that your release can use.

## <a id="..."></a> Decide What to Release ##

Some releases contain a single app.
Others are collections of pieces of software that together form a service.
For example, you could release a service that consists of two MySQL nodes along with a dashboard app.
These three pieces can each be thought of as an area of functionality, or a feature.
In a BOSH release, each piece is a _job_.

In a BOSH release, four directories assume primary importance:

* **jobs** describe pieces of a service.
* **packages** provide source code and dependencies to jobs.
* **src** provides packages the non-binary files they need.
* **blobs** provides packages the binaries they need, other than binaries that are checked into a Git repository.

Creating a release entails several judgment calls: what to include, how to structure it, and how to split up jobs and packages.

This tutorial walks you through creating a dev release and then a final release
that contains a single job, namely a Sinatra app called `ardo`.

## <a id="..."></a> Create the Release Directory ##

All the constituent parts of a release reside in the _release directory_.

To get started creating a release, create the release directory:

  `bosh init release ardo-release --git`

The `--git` option initializes a git repo in the release directory.
This is recommended but not required.

`cd` into the release directory and view the release with `tree`:

<pre class="terminal">
$ tree .
.
├── blobs
├── config
│   └── blobs.yml
├── jobs
├── packages
├── src
└── ardo_web

6 directories, 1 file
</pre>

**Note**: The release directory is where you run all the BOSH commands in this tutorial.

## <a id="..."></a> Create the Job Skeletons ##

For each piece of software you include in a release, you create a job.

When first created, the job is a _skeleton_: an empty structure to be filled up
as release creation progresses.

The example release only includes one job.

Generate a job skeleton:

  `bosh generate job ardo_web`

Naming the job `ardo_web` distinguishes it from the original app.

View the job skeleton with `tree`:

<pre class="terminal">
$ tree jobs/ardo_web/
jobs/ardo_web/
├── monit
├── spec
└── templates

1 directory, 2 files
</pre>

### <a id="..."></a> Create control script for the jobs  ###

Every deployed app must have a way to start and stop.
You provide that in a BOSH release by writing a control script that
includes a start command and a stop command.
The script is an ERB template stored in the `templates` directory for the relevant job.
At compile time, BOSH transforms templates into files which
eventually reside on the VMs where the deployed software runs.

In production situations, start and stop commands can be required to turn more things on and off
than the simple commands in our example do.
Control scripts can be the source of unexpected behavior that you discover while testing your dev releases.
When that happens, you refine your scripts and iterate.
For these reasons, writing scripts is typically one of the heavier tasks entailed in creating a release.

Create the control script and save it as `ctl.erb` in the `templates` directory.

### <a id="..."></a> Update the job specs  ###

The `spec` file is where metadata about your job resides.

You now possess two pieces of information which must be recorded in that metadata.

1. When the software is deployed, the `ctl.erb` template should become
a file on the VM.
Its path on the VM should `bin/ctl`.

1. Since there is an `ardo_web` job, you know that an `ardo_web` package must be created
sooner or later.

In the `spec` file, edit the `templates` and `packages` blocks to reflect this information:

~~~yaml

templates:
  ctl.erb: bin/ctl

packages:
- ardo_web

~~~

### <a id="..."></a> Commit ###

You have now created a job skeleton.
If your release includes several jobs, go back and repeat this process for each one.

This is a good time to commit.
Be aware that if you followed the recommended practice of using the `--git` option with
`bosh init release`, the correct `.gitignore` file has been automatically created for you.

## <a id="..."></a> Make a dependency graph ##

There are two kinds of dependencies in a BOSH release:

* The **runtime dependency**, where a job depends on a package at runtime.
For example, the `ardo_web` job depends on Ruby.
* The **compile-time dependency**, where a package depends on another package at compile time.
For example, Ruby depends on the YAML library.

Three rules govern these dependencies:

* Jobs never depend on other jobs.
* Jobs can depend on packages.
* Packages can depend on other packages.

Whether your release works or not depends on your correctly understanding the dependencies
between its jobs and packages.
Creating a dependency graph helps you clarify this understanding, and provides an essential
reference as you add elements to the release.

Go through any scripts you have created and note the files cited by each script.
_note package path_ and _go through all job templates_.
The names of these files must be added to the `packages` block of the job spec.
In our example, they are `ardo_web` and `ruby_1.9.3`.

Edit the `packages` block of the job spec to show the files cited by the control script:

~~~yaml
packages:
- ardo_web
- ruby_1.9.3
~~~

The dependency graph for `ardo-release` looks like this:

_insert illustration_

## <a id="..."></a> Create packages ##

Taking one package at a time, you can complete the steps in this section,
then start another package and iterate.

Create packages starting from the bottom of your dependency graph.

### <a id="..."></a> Add package skeletons ###

When first created, the package is a _skeleton_: an empty structure to be filled up
as release creation progresses.


  `bosh generate package libyaml_0.1.4`

  `bosh generate package ruby_1.9.3`

You now have package skeletons for all the dependencies in your release.

View the package skeletons with `tree`:

<pre class="terminal">
$ tree packages
packages
├── libyaml_0.1.4
│   ├── packaging
│   ├── pre_packaging
│   └── spec
└── ruby_1.9.3
    ├── packaging
    ├── pre_packaging
    └── spec

2 directories, 6 files
</pre>

Later on, you will flesh out the skeletons to make them usable packages.

**Note**: Use of the `pre_packaging` file is not recommended, and is not discussed in this tutorial.

### <a id="..."></a> Create packaging scripts ###

In our example, BOSH compiles Ruby code into gems.
Many releases include packages which need to be compiled.
The resulting compiled binaries need to be placed in the proper location on VMs where
the deployed release runs.

BOSH interacts with packaging scripts to make this happen.

* The packaging script specifies a target directory.
* BOSH creates the target directory locally.
* The packaging script provides instructions for compiling the package.
* BOSH compiles binaries as specified in the packaging script.
* BOSH places the compiled binaries in the target directory.
* BOSH replicates the target directory, now populated with compiled binaries, on a VM.

Not _all_ releases require BOSH to compile code.
Some only contain code in a scripting language, for example.
In that case, the packaging script still specifies a target directory,
but could contain a copy command rather than compilation instructions.

Like control scripts, packaging scripts require a relatively large proportion of the
labor that goes into creating a release.

Write your packaging scripts now.
To get started, study the examples.

* Begin each script with a `set -e -x` line to aid debugging at compile time.
* Write each script to install the software for the package it belongs to,
and also invoke any package dependencies.
* Use your dependency graph to determine which dependencies belong in each
packaging script.

### <a id="..."></a> Create packaging specs ###

Within each package directory is a `spec` file which states:

* The package name.
* The package's dependencies.
* The location where BOSH can find the binaries and other files that the package needs.

Use your dependency graph to determine which dependencies belong in each spec.
Your personal preferences and style as a developer also play a role here.
Consider our example: the spec for Ruby lists `rubygems` and `bundler` as dependencies along
with Ruby itself.
Some Ruby developers would do it this way; others would not.
Remember not to depend on the presence of libraries or other software on the stemcells that
BOSH uses to create VMs.

Describe binary locations in the `files` block of the spec according to this convention:

* Find the official site for the binary in question.
For example, Ruby might be at `http://cache.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p484.tar.gz`.

* Download the binary from the official location and make sure the file hash matches.

* Record the binary name including version number, with a slash and the binary filename concatenated to it.
It's a good idea to cite the official URL in a comment, in the same line.

BOSH interprets the locations you record in the `files` section as being either in the `src` directory or
in the `blobs` directory. (BOSH looks in `src` first).
When you add the actual blobs to a local blobstore (see the next section), BOSH populates the `blobs` directory with the
correct information.

Observe how these conventions are followed in the examples.

_add examples inline_

### <a id="..."></a> Add Blobs Locally ###

When creating a release, use Git for your source code.
Since Git is not well-suited to dealing with large binaries,
it's a good idea to avoid checking blobs into Git.

Instead:

* Add blobs to a local blobstore while creating
dev releases.
* Upload blobs to a public blobstore before you create a final release.

Normally, all the binaries you record in your packaging specs should be added to a local blobstore.

### <a id="..."></a> Create a local blobstore  ###

The `config` directory (of which there is only one per release) is where you record the information
BOSH needs to create a local blobstore and pull in the proper binaries.

* The `final.yml` file names the blobstore and declares that it is local.
* The `private.yml` file specifies the path of the blobstore, along with a secret.

The `config` directory also contains two files whose content is automatically generated:
the `blobs.yml` file and the `dev.yml` file.

Adapt the example `final.yml` and `private.yml` files to fit the specifics of your release.

_insert examples_

Note that `final.yml` and `private.yml` essentially divide up a small amount of content.
At some point in the release creation process, `private.yml` may contain keys.
For that reason, it is automatically gitignored (assuming you used the `--git` option when
running `git init release` at the beginning of this tutorial), so its contents truly
remain private in that they are not checked into Git.

The "secret" in the example `private.yml` file is "does not matter."
The reason is that the `secret` line, while required, is deprecated, so its content actually
does not matter.

### <a id="..."></a> Add blobs to blobstore ###

For each blob, run:

`bosh add blob <path> <package_name_as_prefix>`

You construct this command by taking the same information found in the spec for each package in the
`packages` directory.

For example, in `packages/libyaml_0.1.4/spec`, you find:

~~~yaml

files:
- libyaml_0.1.4/yaml-0.1.4.tar.gz # From http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz

~~~

To construct the command, just reverse the order of what's in the spec and delete the filename from the prefix:

`bosh add blob http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz libyaml_0.1.4`


## <a id="..."></a> Update Specs ##

### <a id="..."></a> Add blob to dependency spec ###

* libyaml spec needs to know about libyml blob
* BOSH looks in two locations: `src` and `blobs`

### <a id="..."></a> Update package spec with dependency information  ###

* Add ruby's dependence on libyaml to Dependencies section of ruby spec
* satisfies a line in the `packaging` script

### <a id="..."></a> Update package spec with blobs information ###

* ruby, rubygems, bundler
* with `ruby_1.9.3` prefix — all part of that package
* `bosh blobs` to see that they are there and copy filenames
* paste filenames into the `ruby_1.9.3` spec


## <a id="..."></a> Create Properties  ##

* Properties are inputs ...
* Coordinating with the `properties` block in the manifest...

## <a id="..."></a> Do a Dev Release  ##

We have:

* blobs
* source
* script to build from source
* control script

Can't create release before uploading blobs unless we use the `--force`
option, which tells BOSH to use the blobs in the local blobstore.
This is permissible when creating and testing dev releases but not
final releases.

`bosh create release --force`

BOSH asks for release name.
For a dev release, this can be anything.

## <a id="..."></a> Deploy the Dev Release  ##

Target a director.

See what releases are available:

  `bosh releases`

If BOSH is already pointing to a release, edit the BOSH deployment manifest.
Otherwise, [create a manifest] (./create-manifest.html).

Upload the new dev release.
If in the release directory, no path needed:

   `bosh upload release`

## <a id="..."></a> Test the Dev Release  ##

What tests to run depends on the software you are releasing.



* Debug primer: log in on VM, etc.
* If your release fails any of these tests, fix and do a new dev release.

## <a id="..."></a> Do a Final Release  ##

Only proceed to this step if your latest dev release passes all tests.

### <a id="..."></a> Upload blobs ###

You are ready to do a final release except for one thing:
your latest dev release depends on locally-stored blobs.

You remedy this by uploading your blobs to a public blobstore:

`bosh upload blobs`

### <a id="..."></a> Commit ###

You have run the `bosh upload blobs` command so the `blobs` file now contains names and keys.

This is a good time to commit.

### <a id="..."></a> Release ###

Run:

`bosh release --final`

BOSH prompts you for a release name, and assigns a whole-number version to the release.

## <a id="..."></a> Deploy the Final Release  ##

Run:

`bosh deploy`

