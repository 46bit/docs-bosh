---
title: Creating a BOSH Release — Step-by-Step Summary
---

_This topic assumes that you have read [Creating a BOSH Release](./create-release.html)._

The workflow for creating BOSH releases is iterative, and looks like this:

  <%= image_tag("release-iterate.png") %>

## <a id="sum-prep"></a> Preparation ##

The instructions in this section only need to be done once.
After that you create a dev release (Steps 1 through 6),
and iterate through those steps until you are ready to do
a final release.

### <a id="sum-init"></a> Create the release directory ###

Navigate into the workspace where you want the release to be, and create the release directory:

    `bosh init release <release_name> --git`

Navigate into the release directory.

### <a id="sum-src"></a> Populate the src directory ###

Copy your source code into the src directory.
Alternatively use another mechanism, like a Git submodule or a Mercurial repo,
to link your source code to the directory.

### <a id="sum-strategy"></a> Choose a work strategy ###

Choose to work one section at a time or one job at a time.

## <a id="sum-job-skel"></a> Step 1: Create Job Skeletons ##

### <a id="sum-init-job"></a>Initialize job skeletons ###

For each job, run:
    `bosh generate job <job_name>`

### <a id="sum-control-scripts"></a>Create control scripts ###

For each job, create a control script in the form of an ERb template and save it in the templates directory for the job.

### <a id="sum-monit"></a>Update monit files ###

For each job, update the `monit` file to reference each command provided by the templates for the job, and to match the example.

### <a id="sum-job-specs"></a>Update job specs ###

For each job, update the `templates` block of the `spec` file to reference each template and specify a path in
accordance with the convention `ctl.erb: bin/ctl`.

### <a id="sum-commit-1"></a>Commit ###

## <a id="sum-graphs"> </a>Step 2: Make Dependency Graphs ##

Record compile-time and runtime dependencies in your graph, to match the example.

  <%= image_tag("dep-graph.png") %>

## <a id="sum-pkg-skel"></a> Step 3: Create Package Skeletons ##

### <a id="sum-pkg-skel-init"></a>Initialize Package Skeletons

Create packages starting from the bottom of your dependency graph.

    `bosh generate package <dependency_name>`

### <a id="sum-pkg-spec"></a>Update packaging specs ###

For each package, update the `files` block of the spec to cite the files on which the package depends.

### <a id="sum-create-pkging-scripts"></a>Create packaging scripts ###

For each package, create a script which renders the source files referenced in the package specs
into executable binaries and scripts.
Scripts should start with `set -e -x`, and must deliver resulting code to the `BOSH_INSTALL_TARGET` directory.

### <a id="sum-update-job-specs"></a>Update job specs with dependencies ###

For each job, add runtime dependencies to the `packages` block of the job spec.

## <a id="sum-blobs"></a>Step 4: Add Blobs ##

### <a id="sum-blobstore"></a>Configure a blobstore ###

In the config directory, name the blobstore and declare its type in the
`final.yml` file, and specify the blobstore path and a secret in the `private.yml` file.

### <a id="sum-inform"></a>Inform BOSH where blobs are ###

For each blob, run:

    `bosh add blob <path_to_blob_on_local_system> <package_name>`

## <a id="sum-properties"></a> Step 5: Create Job Properties ##

For each job, add a variable for the property to relevant templates in the `properties` block of the job spec.

Specify the property in the deployment manifest.

## <a id="sum-dev-release"></a> Step 6: Do a Dev Release ##

### <a id="sum-create-dev-release"></a>Create the Dev release ###

    `bosh create release --force`

BOSH prompts for a release name, and assigns a dot-number version to the release.

### <a id="sum-deploy-dev-release"></a>Deploy the Dev Release ###

See what director BOSH is targeting:

    `bosh target`

Target a director:

    `bosh target <director_url>`

See what releases are available:

    `bosh releases`

If BOSH is already pointing to a release, edit the BOSH deployment manifest. Otherwise, create a manifest.

Upload the new dev release.

    `bosh upload release`

Deploy:

    `bosh deploy`

### <a id="sum-test-dev-release"></a>Test the Dev Release ###

If your release fails tests, follow this pattern.

* Fix the code.
* Do a new dev release.
* Run `bosh deploy` to see whether the new release deploys successfully.

## <a id="sum-final-release"></a>Do a Final Release ##

### <a id="sum-upload-blobs"></a> Upload blobs ###

Run `bosh blobs` and confirm that the list contains only those blobs needed for
the final release.

Run `bosh upload blobs` to upload blobs to the public blobstore you configured earlier.

### <a id="sum-commit-2"></a> Commit ###

Commit and push your code to a shared repository to give others access to your final release.

### <a id="sum-final-release"></a> Release ###

Run `bosh release --final`

BOSH prompts for a release name, and assigns a whole-number version to the release.

### <a id="sum-commit-3"></a>Commit ###

### <a id="sum-final-deploy"></a> Deploy the Final Release ###

Run `bosh deploy`.



















