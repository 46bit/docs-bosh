---
title: Interpolation
---

<p class="note">Note: Applies to CLI v2.</p>

CLI provides basic interpolation support via `bosh interpolate` command and common flags on several commands.

There are two categories of changes that may be useful to perform on YAML files:

- structural changes
- filling in values

## <a id="ops"></a> Operations

An operation is a structural change that can be performed on a YAML file such as adding an item to an array, setting key to a particular value, deleting an item, etc. CLI provides `-o` (`--ops-file`) flag that loads a YAML file with multiple operations:

```yaml
- type: replace
  path: /releases/-
  value:
    name: os-conf
    version: latest

- type: replace
  path: /stemcells/alias=default/version
  value: "3315.12"
```

Operations are executed in order and multiple operation files can be provided.

See [go-patch examples](https://github.com/cppforlife/go-patch/blob/master/docs/examples.md) for details.

---
## <a id="vars"></a> Variables

A variable is a slot in a YAML file that needs to be filled in before processing continues. Variables are entirely interpolated by the CLI for `create-env` and `delete-env` commands since there is no Director available. For all other commands such as `deploy` and `update-runtime-config` CLI will do as much interpolation as possible and will let the Director rest (with the help of config server API).

<p class="note">Note: Unless Director is configured with a config server enabled variables will not be interpolated by the Director.</p>

Each variable has a name, an optional type and generation options. A variable is specified via double parenthesis in a YAML file:

```yaml
---
value: ((prop))
value2: ((prop2))
```

To fill in variables via CLI one or more flags can be used:

- `-v` (`--var`) specifies a single variable value by 'VAR=VALUE'
- `--var-file` specifies a single variable value loaded from file path
- `--vars-file` specifies YAML file path to load multiple variables
- `--vars-env` specifies prefix to load variables from the environment
- `--vars-store` specifies YAML file path to load and *store* multiple variables

For example:

<pre class="terminal">
$ bosh int ./config.yml -v prop=value -v prop2=value2
value: value
value2: value2

Succeeded
</pre>

If a variable is specified with a type and optional generation options, it can be automatically generated either by the CLI or the Director. CLI will try to generate variables if `--vars-store` flag is specified with the location of a file. Director will try to generate variables if config server is enabled.

---
## <a id="interpolate"></a> Interpolate command

CLI includes `bosh interpolate` command which sole purpose is to execute operation files and interpolate variables. It does not perform any other work unlike other commands. This command can be used with any YAML file even unrelated to BOSH.

`--path` flag is useful for extracting portion of a YAML document:

<pre class="terminal">
$ bosh int ./creds.yml --path /director_ssl/ca
</pre>

---
## <a id="misc"></a> Misc uses

`bosh interpolate` command can be used in a generic way to generate CA and leaf certificates.

```yaml
variables:
- name: default_ca
  type: certificate
  options:
    common_name: ca
- name: service_ssl
  type: certificate
  options:
    ca: default_ca
    common_name: ((internal_ip))
    alternative_names: [((internal_ip))]
```

<pre class="terminal">
$ bosh interpolate certs-tpl.yml -v internal_ip=1.2.3.4 --vars-store certs.yml --var-errs
$ bosh interpolate certs.yml --path /service_ssl/ca
$ bosh interpolate certs.yml --path /service_ssl/certificate
$ bosh interpolate certs.yml --path /service_ssl/private_key
</pre>
