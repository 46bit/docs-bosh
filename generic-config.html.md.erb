---
title: Generic Config
---

<p class="note">Note: This feature is available with bosh-release v264+.</p>

Generic config is a way to separate BOSH's configuration into different types and "branches" within those types. This gives the operator the ability to have a more granulated control of the configuration files. For example, as an operator of a multi infrastructure platform you may want to leave the responsibility of updating each "branch" of the cpi config to the team responsible of that infrastructure.

---
## <a id='built-in-types'></a> Built-in Types

There are three built-in types: `cloud`, `runtime` and `cpi`. You can interact with the built-in types just as you have been doing so far via the [`ucc`](cli-v2.html#cloud-config-mgmt), [`urc`](cli-v2.html#runtime-config-mgmt) and [`update-cpi-config`](cli-v2.html#cpi-config-mgmt) CLI commands respectively. By using the commodity commands you will only be able to interact with the default "branch" of the given type, this will be good enough in most cases but like in our example before if you need to create "branches" out of any of the built-in types, you need to use the [`update-config`](cli-v2.html#update-config) command. Keep in mind that if you use the [generic config commands](cli-v2.html#generic-config-mgmt) to interact with the built-in types, you still need to comply with the structure of the YAML file for each type.

---
## <a id='built-in-types'></a> User defined Types

In addition to the built-in types an operator can define new config types using the [`update-config`](cli-v2.html#update-config) CLI command. The config file can be any file containing valid YAML.

---
## <a id='update'></a> Updating and retrieving a generic config

To add or update a generic config on the Director use the [`bosh update-config`](cli-v2.html#update-config) CLI command. If you do not provide a name using the `--name` option, `default` will be used.

<pre class="terminal">
$ bosh update-config my-type configs.yml
Using environment '192.168.50.6' as client 'admin'

+ configs:
+   - name: team-a-config
+     properties:
+       ...
+   - name: team-b-config
+     properties:
+       ...

Continue? [yN]: y

Succeeded

$ bosh config my-type
Using environment '192.168.56.6' as client 'admin'

configs:
  - name: team-a-config
    properties:
      ...
  - name: team-b-config
    properties:
      ...
</pre>

Or you could split them into different "branches" using the `--name` option.

<pre class="terminal">
$ bosh update-config my-type --name=team-a config-a.yml
Using environment '192.168.50.6' as client 'admin'

+ configs:
+   - name: team-a-config
+     properties:
+       ...

Continue? [yN]: y

Succeeded

$ bosh config my-type --name=team-a
Using environment '192.168.56.6' as client 'admin'

configs:
  - name: team-a-config
    properties:
      ...

Succeeded

$ bosh update-config my-type --name=team-b config-b.yml
...

$ bosh config my-type --name=team-b
...
</pre>

---
## <a id='list'></a> Listing generic configs

To list all generic configs use the [`bosh configs`](cli-v2.html#list-configs) CLI command.

<pre class="terminal">
$ bosh configs my-type
Using environment '192.168.50.6' as client 'admin'

Type     Name
my-type  default
~        team-a
~        team-b

3 configs

Succeeded
</pre>

You can also filter configs by `type` and/or `name`

<pre class="terminal">
$ bosh configs --type=my-type --name=team-a
Using environment '192.168.50.6' as client 'admin'

Type     Name
my-type  team-a

1 configs
</pre>

---
## <a id='list'></a> Deleting generic configs

To delete generic configs use the [`bosh delete-config`](cli-v2.html#delete-config) CLI command. If you do not provide a name using the `--name=` option, `default` will be used.

<pre class="terminal">
$ bosh delete-config my-type
</pre>

