---
title: Deploying MicroBOSH
---

The only supported way to deploy BOSH for production is to use MicroBOSH.

MicroBOSH runs within a single VM on any cloud infrastructure that is supported for deploying software with BOSH.
MicroBOSH is suited to deploying BOSH releases of any software, including multi-VM BOSH.

To deploy MicroBOSH you need a stemcell and a manifest.
You do not need a release since MicroBOSH itself is included within the stemcell.

The details of how you deploy MicroBOSH depend on which IaaS you use.
This topic outlines a general procedure that applies for all IaaS's,
and provides examples from a particular deployment which happens to use AWS.

## <a id="prep"></a> Preparing to Deploy  ##

Your overall goal when preparing to deploy MicroBOSH is ensure that you have a stemcell, a manifest,
and properly set up environments both locally and in the cloud.

### <a id="cloud"></a> Set up a deployment area in the cloud ###

You need to collect or decide:

1. The deployment name.
1. The domain, subdomain, and any IaaS-specific information about the where your deployment should reside.
1. The name and credentials of the user who will administer your deployment.

* For example, on AWS you need:

1. The deployment name.
1. The domain, subdomain, and primary availability zone.
1. The name, access key ID, and secret access key for the administrative user for the MicroBOSH you intend to deploy.

To obtain the user information you could:

1. Log into AWS.
1. Create a new group of users.
1. Create a user to administer the MicroBOSH.
* AWS takes you through a series of wizard-like popup screens.
Pause when you get to the one that says:
"Your 1 User(s) have been created successfully.
This is the last time these User security credentials will be available for download."
1. Copy the `Access Key ID` and the `Secret Access Key` for later use.

### <a id="local"></a> Set up a local work area  ###

You need a "home base" where you run BOSH commands and where downloads can land, on your local system.
How to do this is up to you.

* For example, you could create a directory structure like this:

  `~/deployments-aws/boshtest/deployments`

### <a id="stemcell"></a> Obtain a stemcell  ###

[Download](http://bosh-artifacts.cfapps.io/) a stemcell that is appropriate for your preferred combination of IaaS and VM type.
_Comment about where to download to._

* For example, the stemcell for CentOS on AWS is called `light-bosh (aws xen centos)`.
"Light BOSH" stemcells are AWS-specific.
They are actually just pointers to stemcells that already exist on AWS.
Using a light BOSH stemcell spares you from the "uploading a stemcell" step later on.

### <a id="cli"></a> Install the BOSH CLI  ###

* From the _which?_ directory, run the command shown on the stemcell download site:
	`gem install bosh_cli -v 1.2089.0`

### <a id="enviro"></a> Set up your local environment   ###

At the command line on your local system:

1. cd into the _which?_ directory.
1. Generate the BOSH environment variables:

	`source bosh_environment`
1. Check to see that the BOSH environment variables exist:

	`env | grep BOSH`
1. Using the information you have [collected](#cloud), assign values to the BOSH environment variables.

* For example, you could set up the environment for an AWS deployment as follows:

<pre class="terminal">
$ export BOSH_DEPLOYMENT_NAME=boshtest
$ export BOSH_VPC_DOMAIN=example.com
$ export BOSH_VPC_SUBDOMAIN=myboshtest
$ export BOSH_VPC_PRIMARY_AZ=us-east-1b
$ export BOSH_VPC_ACCESS_KEY_ID=12345abcde12345abcde12345
$ export BOSH_VPC_SECRET_ACCESS_KEY=12345abcde22345abcde32345abcde42345abcde
</pre>

### <a id="manifest"></a> Create the manifest  ###

If you are using an IaaS other than AWS, you need to use a text editor to create a deployment manifest, which is a YAML file named `micro-bosh.yml`.
Refer to [Creating a BOSH Deployment Manifest](./create-manifest.html) for instructions.

For AWS, there are BOSH CLI commands which generate the manifest for you.

For example:

1. cd into the _which?_ directory.
1. Generate the manifest:

	`bosh aws generate micro_bosh aws_vpc_receipt.yml aws_route53_receipt.yml`
1. Verify that the manifest was generated:

	`ls -al micro-bosh.yml`

## <a id="deploy"></a> Deploying MicroBOSH  ##

Once preparation is complete, you deploy MicroBOSH in three steps.

### <a id="upload"></a> Upload the stemcell  ###

**Note**: Skip this step if you are using AWS.

* From the _which?_ directory, run the command:
	`foo`

### <a id="set"></a> Set the deployment  ###

Before you deploy, you must set the BOSH CLI to use the correct manifest.
This is called "setting the deployment."

1. cd into the _which?_ directory.
1. Run the `deployment`:

    `bosh micro deployment micro/micro_bosh.yml`

### <a id="deploy"></a> Deploy MicroBOSH  ###

1. cd into the _which?_ directory.
1. Deploy MicroBOSH:

  `bosh micro deploy <stemcell_URL>`

## <a id="verify"></a> Verifying your Deployment  ##

_Mention that BATS is not needed here, provide a simple sanity check._



