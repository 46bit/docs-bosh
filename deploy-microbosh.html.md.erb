---
title: Deploying MicroBOSH
---

The only supported way to deploy BOSH for production is to use MicroBOSH.

MicroBOSH runs within a single VM on any cloud infrastructure that is supported for deploying software with BOSH.
MicroBOSH is suited to deploying BOSH releases of any software, including multi-VM BOSH.

To deploy MicroBOSH you need a stemcell and a manifest.
You do not need a release since MicroBOSH itself is included within the stemcell.

The IaaS you use determines many details of how you deploy MicroBOSH.
This topic starts with a general procedure that applies for all IaaS's,
and ends with an example focused on AWS.

## <a id="prep"></a> Preparing to Deploy  ##

Your overall goal when preparing to deploy MicroBOSH is to have a stemcell, a manifest,
and properly set up environments both locally and in the cloud.

**Note**: Along with the decision you have made to deploy MicroBOSH,
you should have made a few more decisions by now:

* What IaaS to use.
* What to name the cloud you plan to deploy on that IaaS.

### <a id="local"></a> Set up a local work area  ###

**Note**: While not required, the instructions in this section are highly recommended.

Set up a directory structure with three levels:

1. A top-level directory for each IaaS you plan to use.
1. Inside the IaaS directory, directories for each cloud you intend to deploy on the IaaS.
1. Inside each cloud directory, directories for each product you intend to deploy. In this context, MicroBOSH is a product.

* For example, you might be planning to deploy MicroBOSH on a cloud named `boshtest`, that in turn is deployed to the OpenStack IaaS.
You would create a directory for each, such that the path to your MicroBOSH deployment could be `deploy2openstack/boshtest/micro`.

<%= image_tag("bosh-directories-ex.png") %>

### <a id="cli"></a> Install the BOSH CLI  ###

* Run this command to install the BOSH CLI along with its MicroBOSH plugin:

    `gem install bosh_cli bosh_cli_plugin_micro`

### <a id="cloud"></a> Set up a deployment area in the cloud ###

Collect or decide:

1. The name of the cloud you plan to deploy.
1. Any IaaS-specific information about where your deployment should reside.
1. The name and credentials of the user whom you want to designate as admin for your deployment.

### <a id="stemcell"></a> Obtain a stemcell  ###

[Download](http://bosh-artifacts.cfapps.io/) a stemcell that is appropriate for your preferred combination of IaaS and VM type.
Download to the directory of your choice, and remember its path for later use.

### <a id="enviro"></a> Set up your local environment   ###

In the directory that contains files for your MicroBOSH deployment (`deploy2openstack/boshtest/micro` in these examples),
create a text file named `bosh_environment`.

* For each item of information enumerated [above](#cloud),
add a line to the file, of the form:

    `export <BOSH_environment_variable>=<value>`

Use the information you have [collected](#cloud) to identify values to assign.

* Now use the file to generate the BOSH environment variables:

    `source bosh_environment`

* Check to see that the BOSH environment variables exist:

    `env | grep BOSH`

### <a id="manifest"></a> Create the manifest  ###

If you are using an IaaS other than AWS, you need to use a text editor to create a deployment manifest.
Refer to [Creating a BOSH Deployment Manifest](./create-manifest.html) for instructions.

For AWS, there are BOSH CLI commands which generate the manifest for you.

The MicroBOSH deployment manifest is a YAML file named `micro-bosh.yml` and should reside in the directory
named for the product it deploys (`deploy2openstack/boshtest/micro` in these examples).

## <a id="deploy"></a> Deploying MicroBOSH  ##

When you are ready to deploy, be sure you know the local path to the stemcell you downloaded.
Then `cd` into the directory you created for MicroBOSH (`micro` in these examples).

1. Set the deploymentâ€”that is, direct the BOSH CLI to use the correct manifest:

    `bosh micro deployment micro_bosh.yml`

1. Deploy MicroBOSH:

    `bosh micro deploy <local_path_to_stemcell>`

**Note**: An important effect of the `bosh micro deploy` command is to create the `bosh-deployment.yml` file,
which functions like a small database that MicroBOSH uses when bootstrapping itself.

## <a id="verify"></a> Verifying your Deployment  ##

You have two general options for verifying that your deployment was successful.
These are:

1. Start using MicroBOSH by targeting the new director and uploading software.
A minimal "dummy release" can be useful here.

2. Running the BOSH Acceptance Tests (BATS), which requires advanced system administration skills.



