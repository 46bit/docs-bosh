---
title: Deploying MicroBOSH
---

The only supported way to deploy BOSH for production is to use MicroBOSH.

MicroBOSH runs within a single VM on any cloud infrastructure that is supported for deploying software with BOSH.
MicroBOSH is suited to deploying BOSH releases of any software, including multi-VM BOSH.

To deploy MicroBOSH you need a stemcell and a manifest.
You do not need a release since MicroBOSH itself is included within the stemcell.

The IaaS you use determines many details of how you deploy MicroBOSH.
This topic starts with a general procedure that applies for all IaaS's,
and ends with an example focused on AWS.

## <a id="prep"></a> Preparing to Deploy  ##

Your overall goal when preparing to deploy MicroBOSH is to have a stemcell, a manifest,
and properly set up environments both locally and in the cloud.

**Note**: Along with the decision you have made to deploy MicroBOSH,
you should have made a few more decisions by now:

* What IaaS to use.
* What to name the environment you plan to deploy on that IaaS.
In this context, the term "environment" means one or more software products deployed to the same cloud to provide a service or set of services.

### <a id="local"></a> Set up a local work area  ###

**Note**: How to set up your local work area is up to you.
What follows is a suggested approach that you are free to vary to suit your needs.

Set up a directory structure with two levels:

1. A top-level directory named after the environment you intend to deploy on the IaaS.
1. Inside the environment directory, a directory for each product you intend to deploy. In this context, MicroBOSH is a product.

* The examples that follow assume that you plan to deploy MicroBOSH to an environment named `boshtest`.
You create a directory for each, such that the path to your MicroBOSH deployment is `boshtest/microbosh`.

<%= image_tag("bosh-directories-2-level.png") %>

### <a id="cli"></a> Install the BOSH CLI  ###

* Run this command to install the BOSH CLI along with its MicroBOSH plugin:

    `gem install bosh_cli bosh_cli_plugin_micro`

### <a id="cloud"></a> Set up a deployment area in the cloud ###

Collect or decide:

1. The name of the environment you plan to deploy.
1. Any IaaS-specific information about where your deployment should reside.
1. The name and credentials of the user whom you want to designate as admin for your deployment.

### <a id="stemcell"></a> Obtain a stemcell  ###

[Download](http://bosh-artifacts.cfapps.io/) a stemcell that is appropriate for your preferred combination of IaaS and VM type.
Download to the directory of your choice, and remember its path for later use.

### <a id="manifest"></a> Create the MicroBOSH deployment manifest  ###

The MicroBOSH deployment manifest is a YAML file named `micro-bosh.yml` that should reside in the directory
created for MicroBOSH (`boshtest/microbosh` in these examples).

If you are using AWS, you can generate the manifest using the BOSH CLI.
If you are using another IaaS, use a text editor to create the manifest.

To understand general principles of BOSH deployment manifests,
see [Creating a BOSH Deployment Manifest](./create-manifest.html).

## <a id="deploy"></a> Deploying MicroBOSH  ##

When you are ready to deploy, be sure you know the local path to the stemcell you downloaded.
Then `cd` into the directory you created for MicroBOSH (`boshtest/microbosh` in these examples).

1. Set the deploymentâ€”that is, direct the BOSH CLI to use the correct manifest:

    `bosh micro deployment micro_bosh.yml`

1. Deploy MicroBOSH:

    `bosh micro deploy <local_path_to_stemcell>`

**Note**: An important effect of the `bosh micro deploy` command is to create the `bosh-deployment.yml` file,
which functions like a small database that MicroBOSH uses when bootstrapping itself.

## <a id="verify"></a> Verifying your Deployment  ##

You have two general options for verifying that your deployment was successful.
These are:

1. Start using MicroBOSH by targeting the new director and uploading software.
A minimal ["dummy release"](https://github.com/abic/dummy-boshrelease) can be useful here.

2. Running the BOSH Acceptance Tests (BATS), which requires advanced system administration skills.
