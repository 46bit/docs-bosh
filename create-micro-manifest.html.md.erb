---
title: Creating a MicroBOSH Deployment Manifest
---

The deployment manifest for MicroBOSH is similar the deployment manifest for multi-VM BOSH,
but much simpler.

Parts of the manifest are IaaS-specific.
Refer to the example for the IaaS you plan to use:

* [AWS](#ex-aws)
* [OpenStack](#ex-openstack)
* [vSphere](#ex-vsphere)

## <a id="anatomy"></a> Anatomy of a Manifest ##

You begin the BOSH deployment manifest with three dashes, followed by the name you give the deployment.

For example:

<pre class="terminal">
---
name: microbosh-test
</pre>

After that, there are five required _blocks_:

1. `logging`
1. `network`
1. `resources`
1. `cloud`
1. `apply_spec`

The manifest is in YAML, so the YAML parser translates each block into a hash.
For this reason, you can put the blocks in any order.

### <a id='logging'></a> The logging block ###

Logging level defaults to `info`, and can be set to `warn`, `error`, and the recommended level, `debug`.
Logs are written to a file which you can specify.

<pre class="terminal">
logging:
  # If needed increase the default logging level to trace REST traffic with IaaS providers. Default is info
  level: debug
  # Default location is <deployment_dir>/bosh_micro_deploy.log
  # file:
</pre>

### <a id='network'></a> The network block ###

The `network` block is where you specify network configuration information for the deployment.

**Note**: This block is named "network" (singular) for MicroBOSH, but named "networks" (plural)
for multi-VM BOSH.

For example:

<pre class="terminal">
network:
  type: manual
  subnets:
  - range: 10.10.0.0/24
    gateway: 10.10.0.1
    static:
    - 10.10.0.7 - 10.10.0.9
    reserved:
    - 10.10.0.2 - 10.10.0.6
    - 10.10.0.10 - 10.10.0.10
    dns:
    - 10.10.0.6
    cloud_properties:
      subnet: subnet-d597b993
</pre>

This `cloud properties` sub-block is IaaS-dependent, because subnets, and other
keys may differ from IaaS to IaaS.

### <a id='resources'></a> The resources block ###

The resources block specifies `persistent disk`, which is IaaS-agnostic,
and `cloud_properties`, whose content differs from IaaS to IaaS.

For example:

<pre class="terminal">
resources:
   persistent_disk: 16384
   cloud_properties:
      ram: 8192
      disk: 16384
      cpu: 4
</pre>

### <a id='cloud'></a> The cloud block ###

The resources block specifies a `plugin` which specifies the IaaS you want to use,
and `properties`, whose content differs from IaaS to IaaS.

For example:

<pre class="terminal">
cloud:
  plugin: openstack
  properties:
    openstack:
      auth_url: http://<identity_server>:5000/v2.0
      username: <username>
      api_key: <password>
      tenant: <tenant>
      region: <region> # Optional
      default_security_groups: ["ssh", "bosh"]
      default_key_name: <microbosh_keypair>
      private_key: <path_to_microbosh_keypar_private_key>
</pre>

### <a id='apply'></a> The apply_spec block ###

In the `apply_spec` block, the `properties` sub-block consists of headings followed by
one or more lines of configuration information.
The content varies from IaaS to IaaS.

For example:

<pre class="terminal">
apply_spec:
  properties:
    director:
      max_threads: 3
    hm:
      resurrector_enabled: true
    ntp:
      - 0.north-america.pool.ntp.org
      - 1.north-america.pool.ntp.org
</pre>

## <a id="creating"></a> How to Create a Manifest ##

You can modify example manifests to suit your purposes.
Another approach is to use a tool like [spiff](https://github.com/cloudfoundry-incubator/spiff)
to create a manifest.

## <a id="examples"></a> Example Manifests ##

These examples are designed to illuminate what each IaaS requires in a MicroBOSH deployment manifest.

### <a id="ex-aws"></a> AWS ###

~~~yaml
name: microbosh-aws

logging:
  # If needed increase the default logging level to trace REST traffic with IaaS providers. Default is info
  level: debug
  # Default location is <deployment_dir>/bosh_micro_deploy.log
  # file :

network:
  type: dynamic
  vip: x.x.x.x    #Change this to the allocated IP address from Step 2

resources:
  persistent_disk: 20000
  cloud_properties:
    instance_type: m1.small
    availability_zone: us-east-1a

cloud:
  plugin: aws
  properties:
    aws:
      access_key_id: AKIAIYJWVDUP4KRESQ
      secret_access_key: EVGFswlmOvA33ZrU1ViFEtXC5Sugc19yPzoWRf
      default_key_name: bosh
      default_security_groups: ["bosh"]
      ec2_private_key: ~/.ssh/bosh
      ec2_endpoint: ec2.us-east-1.amazonaws.com
      region: us-east-1

apply_spec:
  agent:
    blobstore:
      address: x.x.x.x    #Change this to the allocated IP address from Step 2
    nats:
      address: x.x.x.x    #Change this to the allocated IP address from Step 2
  properties:
    registry:
      address: x.x.x.x    #Change this to the allocated IP address from Step 2
~~~

### <a id="ex-openstack"></a> OpenStack ###

Explanatory comments follow this example.

~~~yaml
---
name: microbosh-openstack

logging:
  # If needed increase the default logging level to trace REST traffic with IaaS providers. Default is info
  level: debug
  # Default location is <deployment_dir>/bosh_micro_deploy.log
  # file :

network:
  type: manual
  vip: <allocated_floating_ip> # Optional
  ip: <static_ip>
  cloud_properties:
    net_id: <network_uuid>

resources:
  persistent_disk: 16384
  cloud_properties:
    instance_type: <flavor_name>

cloud:
  plugin: openstack
  properties:
    openstack:
      auth_url: http://<identity_server>:5000/v2.0
      username: <username>
      api_key: <password>
      tenant: <tenant>
      region: <region> # Optional
      default_security_groups: ["ssh", "bosh"]
      default_key_name: <microbosh_keypair>
      private_key: <path_to_microbosh_keypar_private_key>

apply_spec:
  properties:
    director:
      max_threads: 3
    hm:
      resurrector_enabled: true
    ntp:
      - 0.north-america.pool.ntp.org
      - 1.north-america.pool.ntp.org
~~~

Adapt the `micro_bosh.yml` file to your environment settings:

#### <a id="network_properties"></a>Network properties ####

This section sets the network configuration for your Micro BOSH.

If you are using nova-network, adapt the network section with below settings:

~~~yaml
network:
  type: dynamic
  vip: <allocated_floating_ip> # Optional
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.

If you are using the new [OpenStack Networking](http://www.openstack.org/software/openstack-networking/) component, adapt the network section with below settings:

1. If your network has DHCP enabled, you can let OpenStack pick an IP address:

~~~yaml
network:
  type: dynamic
  vip: <allocated_floating_ip> # Optional
  cloud_properties:
    net_id: <network_uuid>
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.
* The `net_id` option sets the OpenStack network to use. `network_uuid` **must** be an existing Network UUID (you can list your OpenStack networks using the command `quantum net-list`).

1. If you want to set the Micro Bosh IP address manually:

~~~yaml
network:
  type: manual
  vip: <allocated_floating_ip> # Optional
  ip: <static_ip>
  cloud_properties:
    net_id: <network_uuid>
~~~

* The `vip` option is optional, and allows you to associate a floating IP address to the Micro Bosh vm in case you want to access it from outside of the vm network. If set, `allocated_floating_ip` **must** be a previously allocated floating ip.
* The `ip` option sets the IP address to assign to the Micro BOSH vm. `static_ip` **must** be an IP address belonging to the IP range of one of the network subnets set in `net_id`.
* The `net_id` option sets the OpenStack network to use. `network_uuid` **must** be an existing Network UUID (you can list your OpenStack networks using the command `quantum net-list`).

#### <a id="resources_properties"></a>Resources properties ####

This section sets the resources configuration for your Micro Bosh.

~~~yaml
resources:
  persistent_disk: 16384
  cloud_properties:
    instance_type: <flavor_name>
~~~

* The `persistent_disk` indicates that a new 16Gb volume will be created and attached to the Micro BOSH vm. On this disk, Micro BOSH will store the data, so in case you reboot or when upgrading the Micro BOSH vm, no data will be lost.
* The `instance_type` set the OpenStack flavor used for the Micro BOSH vm. The `flavor_name` **must** have ephemeral disk (check the [validate your OpenStack](validate_openstack.html) guide)

#### <a id="cloud_properties"></a>Cloud properties ####

This section sets the cloud configuration for your Micro BOSH.

~~~yaml
cloud:
  plugin: openstack
  properties:
    openstack:
      auth_url: http://<identity_server>:5000/v2.0
      username: <username>
      api_key: <password>
      tenant: <tenant>
      region: <region> # Optional
      default_security_groups: ["default", <microbosh_security_group>]
      default_key_name: <microbosh_keypair>
      private_key: <path_to_microbosh_keypar_private_key>
~~~

* The `auth_url` option set your [OpenStack identity](http://www.openstack.org/software/openstack-shared-services/) server.
* The `username`, `api_key` and `tenant` options sets your OpenStack credentials.
* The `region` option is optional, and allows you to set the OpenStack region to be used.
* The `default_security_groups` option set the security groups used by Micro BOSH. The `microbosh_security_group` **must** be an existing security group.
* The `default_key_name` and `private_key` options sets the key pair used by Micro BOSH. The `microbosh_keypair` **must** be an existing keypair.

### <a id="ex-vsphere"></a> vSphere ###

Explanatory comments follow this example.

~~~yaml
---
name: microbosh-vsphere

logging:
  # If needed increase the default logging level to trace REST traffic with IaaS providers. Default is info
  level: info
  # Default location is <deployment_dir>/bosh_micro_deploy.log
  # file :

network:
  ip: <ip_address_you_want_for_microbosh>
  netmask: <netmask_for_the_subnet_you_are_deploying_to>
  gateway: <gateway_for_the_subnet_you_are_deploying_to>
  dns:
  # The micro-bosh VM has the following DNS entries in its /etc/resolv.com, allowing it to resolve, for example, IaaS FQDNs.
  - <ip_for_dns>
  cloud_properties:
    name: <network_name_according_to_vsphere>

resources: # this seems like good sizing for microbosh
   persistent_disk: 16384
   cloud_properties:
      ram: 8192
      disk: 16384
      cpu: 4
cloud:
  plugin: vsphere
  properties:
    agent:
      ntp:
        - <ntp_host_1>
        - <ntp_host_2>
     vcenters:
       - host: <vcenter_ip>
         user: <vcenter_userid>
         password: <vcenter_password>
         datacenters:
           - name: <datacenter_name>
             vm_folder: <vm_folder_name>
             template_folder: <template_folder_name>
             disk_path: <subdir_to_store_disks>
             datastore_pattern: <data_store_pattern>
             persistent_datastore_pattern: <persistent_datastore_pattern>
             allow_mixed_datastores: <true_if_persistent_datastores_and_datastore_patterns_are_the_same>
             clusters:
             - <cluster_name>:
                 resource_pool: <resource_pool_name_optional>

apply_spec:
  properties:
    vcenter:
      host: <vcenter_ip>
      user: <vcenter_userid>
      password: <vcenter_password>
      datacenters:
        - name: <datacenter_name>
          vm_folder: <vm_folder_name>
          template_folder: <template_folder_name>
          disk_path: <subdir_to_store_disks>
          datastore_pattern: <data_store_pattern>
          persistent_datastore_pattern: <persistent_datastore_pattern>
          allow_mixed_datastores: <true_if_persistent_datastores_and_datastore_patterns_are_the_same>
          clusters:
          - <cluster_name>:
              resource_pool: <resource_pool_name_optional>
    dns:
        # The BOSH powerDNS contacts the following DNS server for serving DNS entries from other domains.
        recursor: <ip_for_dns>

~~~

The `apply_spec` provides Micro BOSH with the vCenter settings in order for it
to deploy Cloud Foundry.
It is different than the vCenter you are using to deploy MicroBOSH because
MicroBOSH can deploy to a different vCenter than the one it was deployed to.

If you want to create a role for the BOSH user in vCenter, the privileges are
defined [here](./vcenter_user_privileges.html).

Before you can run micro BOSH deployer, you have to create folders according to
the values in your manifest.

1. Create the vm_folder
1. Create the template_folder
1. Create the disk_path in the appropriate datastores
1. Create the resource_pool (optional)


* Datastore Patterns

The datastore pattern above could just be the name of a datastore or some
regular expression matching the datastore name.

If you have a datastore called "vc\_data\_store\_1" and you would like to use
this datastore for both persistent and non persistent disks, your config would
look like this:

~~~yaml
               datastore_pattern: vc_data_store_1
               persistent_datastore_pattern:  vc_data_store_1
               allow_mixed_datastores: true
~~~

If you have two datastores called "vc\_data\_store\_1" and
"vc\_data\_store\_2", and you would like to use both datastore for both
persistent and non persistent disks, your config would look like this:

~~~yaml
               datastore_pattern: vc_data_store_?
               persistent_datastore_pattern:  vc_data_store_?
               allow_mixed_datastores: true
~~~

If you have two datastores called "vnx:1" and "vnx:2", and you would like to
separate your persistent and non persistent disks, your config would look like
this:

~~~yaml
               datastore_pattern: vnx:1
               persistent_datastore_pattern: vnx:2
               allow_mixed_datastores: false
~~~



